//SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.12;

pragma experimental ABIEncoderV2;

//import "./UserContract.sol";

contract PermissionsContract{

    enum PermissionLevel{READ, SHARE, OWNER}

    struct RecordMetadata{
        bytes32 smk;
        bytes32 encodedHash;
    }

    struct PermissionInfo {
        address user;
        PermissionLevel level;
        RecordMetadata metadata;
        address permitter;
    }

    struct UserPermission{
        address user;
        PermissionLevel level;
    }

    event addedPermission(address user, PermissionLevel permissionLevel, address permitter);
    event removedPermission(address user, PermissionLevel permissionLevel, address permitter);

    address parentContractAddress;
    address public dataOwner;

    PermissionInfo[] persmissions;
    mapping (address => uint256) indexOf;


    modifier ownerOnly(){
        require(exists(tx.origin) && persmissions[indexOf[tx.origin] - 1].level == PermissionLevel.OWNER, "The sender of the transaction must be the owner of the data");
        _;
    }

    constructor(address owner, RecordMetadata memory ownerMetadata) {
        parentContractAddress = msg.sender;
        dataOwner = owner;
        addPermission(owner, PermissionLevel.OWNER, ownerMetadata);
    }

    function addPermission(address user, PermissionLevel level, RecordMetadata memory metadata) public {
        require(indexOf[user] == 0, "User already has permissions");
        require(isParentContract(msg.sender) || canAddPermissions(tx.origin, level), "The sender of the transaction cannot add this permission");
        address  permitter;
        if (isParentContract(msg.sender) && level != PermissionLevel.OWNER){
            permitter = dataOwner;
        }
        else permitter = tx.origin;
        persmissions.push(PermissionInfo(user, level, metadata, permitter));
        indexOf[user] = persmissions.length; 
    }

    function editPermission(address user, PermissionLevel newLevel) public ownerOnly {
        require(indexOf[user] != 0, "The user does not have permissions");
        persmissions[indexOf[user] - 1].level = newLevel;
        persmissions[indexOf[user] - 1].permitter = tx.origin;
    }

    function removePermission(address user) public{
        require(exists(user), "No permissions for specified user");
        require(!isOwner(user), "Unable to remove owner's data");
        require(isOwner(tx.origin) || persmissions[indexOf[user] - 1].permitter == tx.origin,
                "The sender of the transaction cannot manage this permission");
        uint256 index = indexOf[user];
        if (index != persmissions.length){
            PermissionInfo storage lastRecord = persmissions[persmissions.length - 1];
            indexOf[lastRecord.user] = index;
            persmissions[index - 1] = lastRecord;                
        }
        persmissions.pop();
        indexOf[user] = 0;
    }

    function getRecordMetadata(address user) external view returns(RecordMetadata memory){
        require(hasAccess(tx.origin, user) || canShare(tx.origin), "User does not have permission");
        return persmissions[indexOf[user] - 1].metadata;
    }

    function getPermissionInfo(address user) external view returns(PermissionInfo memory){
        require(hasAccess(tx.origin, user) || canShare(tx.origin), "User does not have permission");
        return persmissions[indexOf[user] - 1];
    }

    function getPermissions() public view returns(PermissionInfo[] memory){
        require(canShare(tx.origin), "To get information about permissions, the sender must have access canShare");
        return persmissions;
    }

    function getPermittedUsers() external view returns(UserPermission[] memory){
        UserPermission[] memory res =  new UserPermission[](persmissions.length);
        for (uint256 i = 0; i < res.length; ++i){
            res[i] = UserPermission(persmissions[i].user, persmissions[i].level);
        }
        return res;
    }

    function size() external view returns(uint256){
        return persmissions.length;
    }

    function exists(address _address) view public returns(bool){
        return indexOf[_address] != 0;
    }

    function canAddPermissions(address sender, PermissionLevel level) internal view returns(bool){
        if (level == PermissionLevel.OWNER)
            return false;
        
        if(canShare(sender)){
            uint256 index = indexOf[sender];
            if (persmissions[index - 1].level == PermissionLevel.SHARE){
                return level == PermissionLevel.READ;
            }
            return true;
        }
        return false;        
    }

    function hasAccess(address sender, address metadataOwner) public view returns(bool){
        return (isOwner(sender) || sender == metadataOwner) && exists(sender);
    }

    function canShare(address user) internal view returns(bool) {
        uint256 index = indexOf[user];
        if (index == 0)
            return false;
        return persmissions[index - 1].level == PermissionLevel.OWNER || persmissions[index - 1].level == PermissionLevel.SHARE;
    }

    function isOwner(address _address) internal view returns(bool){
        return dataOwner == _address;
    }

    function isParentContract(address _address) internal view returns(bool){
        return _address == parentContractAddress;
    }
}