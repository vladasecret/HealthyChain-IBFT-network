package org.web3j.contractWrapper.generated;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class DoctorContract extends Contract {
    public static final String BINARY = "60a06040523480156200001157600080fd5b5060405162004d5138038062004d518339810160408190526200003491620000df565b600160a060020a0382811660805260008054600160a060020a031916918316919091179055604051829082906200006b90620000b4565b604051809103906000f08015801562000088573d6000803e3d6000fd5b5060018054600160a060020a031916600160a060020a0392909216919091179055506200011792505050565b611bf5806200315c83390190565b8051600160a060020a0381168114620000da57600080fd5b919050565b60008060408385031215620000f357600080fd5b620000fe83620000c2565b91506200010e60208401620000c2565b90509250929050565b608051612fd562000187600039600081816102960152818161034a015281816104250152818161090801528181610e2601528181610f7d015281816112700152818161133b015281816115260152818161182c01528181611ec401528181611f6401526120050152612fd56000f3fe608060405234801561001057600080fd5b506004361061011a5760003560e060020a900480635d25d870116100a6578063c0f10fb811610075578063c0f10fb814610235578063c6a3f64814610248578063e3d35bc91461025b578063f4f6c3201461026e578063fd2de0ca1461027657600080fd5b80635d25d870146101f2578063887ac8e114610207578063986de4f91461020f57806399eb1b531461022257600080fd5b80633709edce116100ed5780633709edce1461019057806337ab35e0146101a357806341dd11d3146101ab57806349d05584146101be578063511c6e14146101df57600080fd5b80630cef3d3c1461011f5780631dbb5f1b1461013d5780632879191b1461016857806328c1f99b1461017d575b600080fd5b610127610289565b604051610134919061259a565b60405180910390f35b60015461015090600160a060020a031681565b604051600160a060020a039091168152602001610134565b61017b61017636600461260e565b61033f565b005b60005461015090600160a060020a031681565b61017b61019e366004612655565b61041a565b6101276108fb565b61017b6101b93660046126c4565b6109cb565b6101d16101cc366004612655565b610e18565b6040516101349291906127e1565b61017b6101ed3660046128d7565b610f72565b6101fa611263565b6040516101349190612971565b6101fa61132e565b6101fa61021d366004612655565b611519565b61017b6102303660046129d2565b611821565b61017b610243366004612655565b611ad1565b61017b610256366004612655565b611cfa565b61017b610269366004612a19565b611eb9565b610127611f57565b61017b610284366004612655565b611ffa565b606033600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016146102df5760405160e560020a62461bcd0281526004016102d690612a47565b60405180910390fd5b600580548060200260200160405190810160405280929190818152602001828054801561033557602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610317575b5050505050905090565b33600160a060020a037f0000000000000000000000000000000000000000000000000000000000000000161461038a5760405160e560020a62461bcd0281526004016102d690612a47565b610393836120c0565b61039c57600080fd5b6040517fb919dfff000000000000000000000000000000000000000000000000000000008152600160a060020a0384169063b919dfff906103e39085908590600401612ae2565b600060405180830381600087803b1580156103fd57600080fd5b505af1158015610411573d6000803e3d6000fd5b50505050505050565b33600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016146104655760405160e560020a62461bcd0281526004016102d690612a47565b6000546040517ffe9fbb80000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301529091169063fe9fbb8090602401602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec9190612aff565b6105615760405160e560020a62461bcd02815260206004820152602c60248201527f556e61626c6520746f20636f6d6d756e6963617465207769746820756e61757460448201527f686f72697a65642075736572000000000000000000000000000000000000000060648201526084016102d6565b6000546040805160e060020a63369d40870281529051600160a060020a039092169163f35b2ad391839163369d4087916004808201926020929091908290030181865afa1580156105b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105da9190612b1c565b6040518263ffffffff1660e060020a0281526004016105fb91815260200190565b602060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190612aff565b6106d75760405160e560020a62461bcd02815260206004820152604c60248201527f497420697320696d706f737369626c6520746f20696e6974696174652061207260448201527f656c6174696f6e20776974686f75742061204163636f756e74436f6e74726f6c60648201527f6c657220636f6e74726163740000000000000000000000000000000000000000608482015260a4016102d6565b600080546040805160e060020a63369d40870281529051600160a060020a0390921691630d2020dd91839163369d4087916004808201926020929091908290030181865afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190612b1c565b6040518263ffffffff1660e060020a02815260040161077291815260200190565b602060405180830381865afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b39190612b35565b60015460405160e160020a6353724bdb028152600160a060020a0385811660048301529293509082169163b2224a6591859185169063a6e497b6906024016020604051808303816000875af1158015610810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108349190612b35565b600160a060020a0316631dbb5f1b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108989190612b35565b60405160e060020a63ffffffff8516028152600160a060020a039283166004820152911660248201526044015b600060405180830381600087803b1580156108df57600080fd5b505af11580156108f3573d6000803e3d6000fd5b505050505050565b606033600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016146109485760405160e560020a62461bcd0281526004016102d690612a47565b600160009054906101000a9004600160a060020a0316600160a060020a03166337ab35e06040518163ffffffff1660e060020a028152600401600060405180830381865afa15801561099e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c69190810190612b76565b905090565b600180546040517f30ccebb5000000000000000000000000000000000000000000000000000000008152326004820152600160a060020a03909116906330ccebb590602401602060405180830381865afa158015610a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a519190612c1a565b6003811115610a6257610a62612aa4565b14610a6c57600080fd5b600080546040805160e060020a63369d408702815290518b9392600160a060020a031691630d2020dd91839163369d40879160048083019260209291908290030181865afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae69190612b1c565b6040518263ffffffff1660e060020a028152600401610b0791815260200190565b602060405180830381865afa158015610b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b489190612b35565b905060006040517f1f735227000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152831690631f73522790602401602060405180830381865afa158015610bab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcf9190612c1a565b6003811115610be057610be0612aa4565b14610c305760405160e560020a62461bcd02815260206004820152601660248201527f55736572206d75737420626520612070617469656e740000000000000000000060448201526064016102d6565b600080546040805160e060020a63369d40870281529051600160a060020a0390921691630d2020dd91839163369d4087916004808201926020929091908290030181865afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190612b1c565b6040518263ffffffff1660e060020a028152600401610ccb91815260200190565b602060405180830381865afa158015610ce8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0c9190612b35565b60405160e160020a6353724bdb028152600160a060020a038d8116600483015291925060009183169063a6e497b6906024016020604051808303816000875af1158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d819190612b35565b600160a060020a03166340451c528c8c8c8c8c8c8c6040518863ffffffff1660e060020a028152600401610dbb9796959493929190612cd5565b6020604051808303816000875af1158015610dda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfe9190612b35565b9050610e0a818d6120dd565b505050505050505050505050565b60608033600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001614610e665760405160e560020a62461bcd0281526004016102d690612a47565b610e6f836120c0565b610ee45760405160e560020a62461bcd02815260206004820152602360248201527f7065726d697373696f6e73206164647265737320646f6573206e6f742065786960448201527f737473000000000000000000000000000000000000000000000000000000000060648201526084016102d6565b6040517f2a50c146000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03841690632a50c14690602401600060405180830381865afa158015610f41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f699190810190612d7b565b91509150915091565b33600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001614610fbd5760405160e560020a62461bcd0281526004016102d690612a47565b610fc6856120c0565b6110155760405160e560020a62461bcd02815260206004820152601c60248201527f5065726d697373696f6e73496420646f6573206e6f742065786973740000000060448201526064016102d6565b6040517f9b1814ef0000000000000000000000000000000000000000000000000000000081528590600160a060020a03821690639b1814ef90611062908890889088908890600401612ddf565b600060405180830381600087803b15801561107c57600080fd5b505af1158015611090573d6000803e3d6000fd5b5050600080546040805160e060020a63369d40870281529051929450600160a060020a039091169250630d2020dd91839163369d40879160048083019260209291908290030181865afa1580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f9190612b1c565b6040518263ffffffff1660e060020a02815260040161113091815260200190565b602060405180830381865afa15801561114d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111719190612b35565b60405160e160020a6353724bdb028152600160a060020a0388811660048301529192509082169063a6e497b6906024016020604051808303816000875af11580156111c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e49190612b35565b6040517fc0f10fb8000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152919091169063c0f10fb890602401600060405180830381600087803b15801561124257600080fd5b505af1158015611256573d6000803e3d6000fd5b5050505050505050505050565b606033600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016146112b05760405160e560020a62461bcd0281526004016102d690612a47565b600160009054906101000a9004600160a060020a0316600160a060020a0316635d25d8706040518163ffffffff1660e060020a028152600401600060405180830381865afa158015611306573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109c69190810190612e20565b606033600160a060020a037f0000000000000000000000000000000000000000000000000000000000000000161461137b5760405160e560020a62461bcd0281526004016102d690612a47565b60035460009067ffffffffffffffff8111156113995761139961280f565b6040519080825280602002602001820160405280156113cc57816020015b60608152602001906001900390816113b75790505b50905060005b600354811015611513576000600382815481106113f1576113f1612ece565b60009182526020822060029190910201546040517f2a50c146000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03909116925081908390632a50c14690602401600060405180830381865afa158015611465573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261148d9190810190612d7b565b91509150600384815481106114a4576114a4612ece565b6000918252602091829020600290910201546040516114d392600160a060020a03909216918591859101612ee7565b6040516020818303038152906040528585815181106114f4576114f4612ece565b60200260200101819052505050508061150c90612f54565b90506113d2565b50905090565b606033600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016146115665760405160e560020a62461bcd0281526004016102d690612a47565b600160a060020a0382166000908152600460205260409020546115ce5760405160e560020a62461bcd02815260206004820152601360248201527f55736572206e6f74206173736f6369617465640000000000000000000000000060448201526064016102d6565b600160a060020a0382166000908152600760205260408120805490919067ffffffffffffffff8111156116035761160361280f565b60405190808252806020026020018201604052801561163657816020015b60608152602001906001900390816116215790505b50905060005b82548110156118175782818154811061165757611657612ece565b6000918252602090912001546040517f1709ef0700000000000000000000000000000000000000000000000000000000815233600482018190526024820152600160a060020a0390911690631709ef0790604401602060405180830381865afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190612aff565b156118075760008084838154811061170657611706612ece565b6000918252602090912001546040517f2a50c146000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0390911690632a50c14690602401600060405180830381865afa158015611770573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117989190810190612d7b565b915091508483815481106117ae576117ae612ece565b600091825260209182902001546040516117d892600160a060020a03909216918591859101612ee7565b6040516020818303038152906040528484815181106117f9576117f9612ece565b602002602001018190525050505b61181081612f54565b905061163c565b509150505b919050565b33600160a060020a037f0000000000000000000000000000000000000000000000000000000000000000161461186c5760405160e560020a62461bcd0281526004016102d690612a47565b611875826120c0565b6118c45760405160e560020a62461bcd02815260206004820152601c60248201527f5065726d697373696f6e73496420646f6573206e6f742065786973740000000060448201526064016102d6565b6040517fe074bb47000000000000000000000000000000000000000000000000000000008152600160a060020a03828116600483015283169063e074bb4790602401600060405180830381600087803b15801561192057600080fd5b505af1158015611934573d6000803e3d6000fd5b5050600080546040805160e060020a63369d40870281529051929450600160a060020a039091169250630d2020dd91839163369d40879160048083019260209291908290030181865afa15801561198f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b39190612b1c565b6040518263ffffffff1660e060020a0281526004016119d491815260200190565b602060405180830381865afa1580156119f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a159190612b35565b60405160e160020a6353724bdb028152600160a060020a0384811660048301529192509082169063a6e497b6906024016020604051808303816000875af1158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a889190612b35565b6040517fc6a3f648000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152919091169063c6a3f648906024016103e3565b600080546040805160e060020a63369d40870281529051329392600160a060020a031691630d2020dd91839163369d40879160048083019260209291908290030181865afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4b9190612b1c565b6040518263ffffffff1660e060020a028152600401611b6c91815260200190565b602060405180830381865afa158015611b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bad9190612b35565b60405160e160020a6353724bdb028152600160a060020a038481166004830152919250339183169063a6e497b6906024016020604051808303816000875af1158015611bfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c219190612b35565b600160a060020a031614611c7a5760405160e560020a62461bcd02815260206004820152601f60248201527f5468652073656e646572206d7573742062652055736572436f6e74726163740060448201526064016102d6565b611c83836120c0565b611cf557611cf58384600160a060020a031663279512916040518163ffffffff1660e060020a028152600401602060405180830381865afa158015611ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf09190612b35565b6120dd565b505050565b600080546040805160e060020a63369d40870281529051329392600160a060020a031691630d2020dd91839163369d40879160048083019260209291908290030181865afa158015611d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d749190612b1c565b6040518263ffffffff1660e060020a028152600401611d9591815260200190565b602060405180830381865afa158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd69190612b35565b60405160e160020a6353724bdb028152600160a060020a038481166004830152919250339183169063a6e497b6906024016020604051808303816000875af1158015611e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4a9190612b35565b600160a060020a031614611ea35760405160e560020a62461bcd02815260206004820152601f60248201527f5468652073656e646572206d7573742062652055736572436f6e74726163740060448201526064016102d6565b611eac836120c0565b611cf557611cf583612250565b33600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001614611f045760405160e560020a62461bcd0281526004016102d690612a47565b6001546040517fc20a44c6000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015283151560248301529091169063c20a44c6906044016108c5565b606033600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001614611fa45760405160e560020a62461bcd0281526004016102d690612a47565b600160009054906101000a9004600160a060020a0316600160a060020a031663f4f6c3206040518163ffffffff1660e060020a028152600401600060405180830381865afa15801561099e573d6000803e3d6000fd5b33600160a060020a037f000000000000000000000000000000000000000000000000000000000000000016146120455760405160e560020a62461bcd0281526004016102d690612a47565b6001546040517ffd2de0ca000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301529091169063fd2de0ca90602401600060405180830381600087803b1580156120a557600080fd5b505af11580156120b9573d6000803e3d6000fd5b5050505050565b600160a060020a0316600090815260026020526040902054151590565b604080518082018252600160a060020a03848116808352848216602080850182815260038054600180820183556000838152985160029283027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81018054928b1673ffffffffffffffffffffffffffffffffffffffff1993841617905594517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c90950180549590991694811694909417909755905485885290835287872055828652600782528686208054958601815580875282872090950180549091168417905581855292546006845285852092855291835284842091909155825260049052205461224c57600580546001810182557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091559054600091825260046020526040909120555b5050565b612259816120c0565b6122605750565b600160a060020a038116600090815260026020526040812054906003612287600184612f6f565b8154811061229757612297612ece565b6000918252602090912060016002909202010154600354600160a060020a039091169150821461237c5760038054600091906122d590600190612f6f565b815481106122e5576122e5612ece565b906000526020600020906002020190508060036001856123059190612f6f565b8154811061231557612315612ece565b6000918252602080832084546002938402909101805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a0393841617825560019687015496909101805490911695821695909517909455935490921681529152604090208290555b600380548061238d5761238d612f86565b600082815260208082206002600019909401848102909101805473ffffffffffffffffffffffffffffffffffffffff19908116825560019190910180549091169055909355600160a060020a038681168252918352604080822082905591841681526006835281812060079093522061240791859161242d565b600160a060020a038116600090815260076020526040902054611cf557611cf581600460055b600160a060020a038316600090815260208390526040902054806124965760405160e560020a62461bcd02815260206004820152601360248201527f4974656d20646f6573206e6f742065786973740000000000000000000000000060448201526064016102d6565b8154811461253c57815460009083906124b190600190612f6f565b815481106124c1576124c1612ece565b600091825260209091200154600160a060020a0316905080836124e5600185612f6f565b815481106124f5576124f5612ece565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0394851617905592909116815290849052604090208190555b8180548061254c5761254c612f86565b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff19169055909201909255600160a060020a039590951681529290935250604081205550565b6020808252825182820181905260009190848201906040850190845b818110156125db578351600160a060020a0316835292840192918401916001016125b6565b50909695505050505050565b600160a060020a03811681146125fc57600080fd5b50565b80356003811061181c57600080fd5b60008060006060848603121561262357600080fd5b833561262e816125e7565b9250602084013561263e816125e7565b915061264c604085016125ff565b90509250925092565b60006020828403121561266757600080fd5b8135612672816125e7565b9392505050565b60008083601f84011261268b57600080fd5b50813567ffffffffffffffff8111156126a357600080fd5b60208301915083602080830285010111156126bd57600080fd5b9250929050565b60008060008060008060008060a0898b0312156126e057600080fd5b88356126eb816125e7565b9750602089013567ffffffffffffffff8082111561270857600080fd5b6127148c838d01612679565b909950975060408b013591508082111561272d57600080fd5b6127398c838d01612679565b909750955060608b0135915061274e826125e7565b90935060808a0135908082111561276457600080fd5b506127718b828c01612679565b999c989b5096995094979396929594505050565b60005b838110156127a0578181015183820152602001612788565b838111156127af576000848401525b50505050565b600081518084526127cd816020860160208601612785565b601f01601f19169290920160200192915050565b6040815260006127f460408301856127b5565b828103602084015261280681856127b5565b95945050505050565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156128515761285161280f565b604052919050565b600067ffffffffffffffff8211156128735761287361280f565b50601f01601f191660200190565b600082601f83011261289257600080fd5b81356128a56128a082612859565b612828565b8181528460208386010111156128ba57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156128ef57600080fd5b85356128fa816125e7565b9450602086013561290a816125e7565b9350612918604087016125ff565b9250606086013567ffffffffffffffff8082111561293557600080fd5b61294189838a01612881565b9350608088013591508082111561295757600080fd5b5061296488828901612881565b9150509295509295909350565b600060208083018184528085518083526040860191506040848202870101925083870160005b828110156129c557603f198886030184526129b38583516127b5565b94509285019290850190600101612997565b5092979650505050505050565b600080604083850312156129e557600080fd5b82356129f0816125e7565b91506020830135612a00816125e7565b809150509250929050565b80151581146125fc57600080fd5b60008060408385031215612a2c57600080fd5b8235612a37816125e7565b91506020830135612a0081612a0b565b6020808252602e908201527f5468652073656e646572206d757374206265207468652063726561746f72206f60408201527f662074686520636f6e7472616374000000000000000000000000000000000000606082015260800190565b60e060020a634e487b7102600052602160045260246000fd5b60038110612ade5760e060020a634e487b7102600052602160045260246000fd5b9052565b600160a060020a0383168152604081016126726020830184612abd565b600060208284031215612b1157600080fd5b815161267281612a0b565b600060208284031215612b2e57600080fd5b5051919050565b600060208284031215612b4757600080fd5b8151612672816125e7565b600067ffffffffffffffff821115612b6c57612b6c61280f565b5060209081020190565b60006020808385031215612b8957600080fd5b825167ffffffffffffffff811115612ba057600080fd5b8301601f81018513612bb157600080fd5b8051612bbf6128a082612b52565b81815290830282018301908381019087831115612bdb57600080fd5b928401925b82841015612c02578351612bf3816125e7565b82529284019290840190612be0565b979650505050505050565b600481106125fc57600080fd5b600060208284031215612c2c57600080fd5b815161267281612c0d565b818352602080840193600091908185020181018584845b87811015612cc85782840389528135601e19883603018112612c6f57600080fd5b8701803567ffffffffffffffff811115612c8857600080fd5b803603891315612c9757600080fd5b8086528087830188880137600086820188015299860199601f01601f19169094018501935090840190600101612c4e565b5091979650505050505050565b608081526000612ce960808301898b612c37565b8281036020840152612cfc81888a612c37565b9050600160a060020a03861660408401528281036060840152612d20818587612c37565b9a9950505050505050505050565b600082601f830112612d3f57600080fd5b8151612d4d6128a082612859565b818152846020838601011115612d6257600080fd5b612d73826020830160208701612785565b949350505050565b60008060408385031215612d8e57600080fd5b825167ffffffffffffffff80821115612da657600080fd5b612db286838701612d2e565b93506020850151915080821115612dc857600080fd5b50612dd585828601612d2e565b9150509250929050565b600160a060020a0385168152612df86020820185612abd565b608060408201526000612e0e60808301856127b5565b8281036060840152612c0281856127b5565b60006020808385031215612e3357600080fd5b825167ffffffffffffffff80821115612e4b57600080fd5b818501915085601f830112612e5f57600080fd5b8151612e6d6128a082612b52565b81815290840283018401908481019088831115612e8957600080fd5b8585015b83811015612ec157805185811115612ea55760008081fd5b612eb38b89838a0101612d2e565b845250918601918601612e8d565b5098975050505050505050565b60e060020a634e487b7102600052603260045260246000fd5b6c01000000000000000000000000600160a060020a03851602815260008351612f17816014850160208801612785565b835190830190612f2e816014840160208801612785565b0160140195945050505050565b60e060020a634e487b7102600052601160045260246000fd5b6000600019821415612f6857612f68612f3b565b5060010190565b600082821015612f8157612f81612f3b565b500390565b60e060020a634e487b7102600052603160045260246000fdfea26469706673582212208e1a297df157d3db4e4455e8353300630720f51f1e3eb73a22fa2ddbe05f41b864736f6c634300080c0033608060405234801561001057600080fd5b5060008054600160a060020a03191633179055611bc3806100326000396000f3fe608060405234801561001057600080fd5b50600436106100a25760003560e060020a900480635d25d8701161006a5780635d25d8701461010a578063b2224a651461011f578063c20a44c614610132578063f4f6c32014610145578063fd2de0ca1461014d57600080fd5b806302e5c0e5146100a7578063284e7ab3146100bc57806330ccebb5146100c457806337ab35e0146100ed57806349d1bb0614610102575b600080fd5b6100ba6100b53660046117e9565b610160565b005b6100ba6103a8565b6100d76100d2366004611822565b6107e2565b6040516100e49190611858565b60405180910390f35b6100f5610861565b6040516100e49190611883565b6100ba6108f1565b610112610d54565b6040516100e491906118d0565b6100ba61012d36600461196a565b610e77565b6100ba6101403660046119a3565b610fdd565b6100f56111c6565b6100ba61015b366004611822565b611254565b600054600160a060020a031633146101965760405160e560020a62461bcd02815260040161018d906119d1565b60405180910390fd5b3260009081526006602052604090205480158015906101fd5750600360056101bf600184611a47565b815481106101cf576101cf611a5e565b600091825260209091206002909102015460a060020a900460ff1660038111156101fb576101fb61183f565b145b80156102415750336005610212600184611a47565b8154811061022257610222611a5e565b6000918252602090912060016002909202010154600160a060020a0316145b801561028257506005610255600183611a47565b8154811061026557610265611a5e565b6000918252602090912060029091020154600160a060020a031632145b6102d15760405160e560020a62461bcd02815260206004820152601f60248201527f496e636f72726563742072656c6174696f6e20636f6e6669726d6174696f6e00604482015260640161018d565b32600081815260066020526040902054831561038c57600160056102f58284611a47565b8154811061030557610305611a5e565b60009182526020909120600290910201805474ff0000000000000000000000000000000000000000191660a060020a8360038111156103465761034661183f565b0217905550604051600160a060020a03831681527fda2501f9553cdefbb3ef3dfef0510beffb546b1947542a5eb088110f85e3eb089060200160405180910390a1610395565b610395826113c4565b6103a2826001600261156e565b50505050565b60008054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190611a77565b6040517ffe9fbb80000000000000000000000000000000000000000000000000000000008152326004820152600160a060020a03919091169063fe9fbb8090602401602060405180830381865afa15801561047f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a39190611a94565b6104f25760405160e560020a62461bcd02815260206004820152601d60248201527f5468652073656e646572206d7573742062652072656769737465726564000000604482015260640161018d565b60008060009054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d9190611a77565b9050600081600160a060020a0316630d2020dd83600160a060020a031663369d40876040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190611ab1565b6040518263ffffffff1660e060020a02815260040161060691815260200190565b602060405180830381865afa158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190611a77565b9050600160a060020a0381161561076a576040517fa6e497b60000000000000000000000000000000000000000000000000000000081523260048201523390600160a060020a0383169063a6e497b6906024016020604051808303816000875af11580156106b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dd9190611a77565b600160a060020a0316631dbb5f1b6040518163ffffffff1660e060020a028152600401602060405180830381865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107419190611a77565b600160a060020a03161461076a5760405160e560020a62461bcd02815260040161018d90611aca565b326000610776826107e2565b9050600181600381111561078c5761078c61183f565b14806107a9575060028160038111156107a7576107a761183f565b145b6107b257600080fd5b60028160038111156107c6576107c661183f565b14156107d9576107d9826003600461156e565b6103a2826113c4565b600160a060020a0381166000908152600660205260408120541561085957600160a060020a03821660009081526006602052604090205460059061082890600190611a47565b8154811061083857610838611a5e565b600091825260209091206002909102015460a060020a900460ff1692915050565b506000919050565b600054606090600160a060020a031633146108915760405160e560020a62461bcd02815260040161018d906119d1565b60028054806020026020016040519081016040528092919081815260200182805480156108e757602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116108c9575b5050505050905090565b60008054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109699190611a77565b6040517ffe9fbb80000000000000000000000000000000000000000000000000000000008152326004820152600160a060020a03919091169063fe9fbb8090602401602060405180830381865afa1580156109c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ec9190611a94565b610a3b5760405160e560020a62461bcd02815260206004820152601d60248201527f5468652073656e646572206d7573742062652072656769737465726564000000604482015260640161018d565b60008060009054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab69190611a77565b9050600081600160a060020a0316630d2020dd83600160a060020a031663369d40876040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2e9190611ab1565b6040518263ffffffff1660e060020a028152600401610b4f91815260200190565b602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b909190611a77565b9050600160a060020a03811615610cb3576040517fa6e497b60000000000000000000000000000000000000000000000000000000081523260048201523390600160a060020a0383169063a6e497b6906024016020604051808303816000875af1158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c269190611a77565b600160a060020a0316631dbb5f1b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a9190611a77565b600160a060020a031614610cb35760405160e560020a62461bcd02815260040161018d90611aca565b32610cc081600233611685565b600480546001810182557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a031916600160a060020a038416908117909155905460008281526003602090815260409182902092909255519182527fab01c3d52fcb31a206264ecbb4e1eb54c97cb19fea28f94932058f6ebbc83148910160405180910390a1505050565b60055460609060009067ffffffffffffffff811115610d7557610d75611b27565b604051908082528060200260200182016040528015610da857816020015b6060815260200190600190039081610d935790505b50905060005b600554811015610e7157600060058281548110610dcd57610dcd611a5e565b600091825260209091206002909102018054909150600160a060020a0381169060a060020a900460ff166003811115610e0857610e0861183f565b604051600160a060020a03929092166c010000000000000000000000000260208301526034820152605401604051602081830303815290604052838381518110610e5457610e54611a5e565b60200260200101819052505080610e6a90611b40565b9050610dae565b50919050565b600054600160a060020a03163314610ea45760405160e560020a62461bcd02815260040161018d906119d1565b6000610eaf836107e2565b90506003816003811115610ec557610ec561183f565b1480610ee257506001816003811115610ee057610ee061183f565b145b15610eec57505050565b6002816003811115610f0057610f0061183f565b1415610f1657610f11836001610fdd565b610fd7565b81600160a060020a03166349d1bb066040518163ffffffff1660e060020a028152600401600060405180830381600087803b158015610f5457600080fd5b505af1158015610f68573d6000803e3d6000fd5b50505050610f7883600384611685565b60028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054600160a060020a031916600160a060020a038716908117909155915460009283526020919091526040909120555b505b5050565b600054600160a060020a0316331461100a5760405160e560020a62461bcd02815260040161018d906119d1565b6000611015836107e2565b9050600181600381111561102b5761102b61183f565b141561103657505050565b600281600381111561104a5761104a61183f565b146110c05760405160e560020a62461bcd02815260206004820152603860248201527f54686520726571756573742063616e6e6f742062652070726f6365737365642060448201527f6265636175736520697420646f65736e27742065786973740000000000000000606482015260840161018d565b600160a060020a0383166000908152600660205260408120546005906110e890600190611a47565b815481106110f8576110f8611a5e565b6000918252602090912060029091020160018101546040517f02e5c0e50000000000000000000000000000000000000000000000000000000081528515156004820152919250600160a060020a0316906302e5c0e590602401600060405180830381600087803b15801561116b57600080fd5b505af115801561117f573d6000803e3d6000fd5b5050505082156111b057805474ff0000000000000000000000000000000000000000191660a060020a1781556111b9565b6111b9846113c4565b6103a2846003600461156e565b600054606090600160a060020a031633146111f65760405160e560020a62461bcd02815260040161018d906119d1565b60048054806020026020016040519081016040528092919081815260200182805480156108e757602002820191906000526020600020908154600160a060020a031681526001909101906020018083116108c9575050505050905090565b600054600160a060020a031633146112815760405160e560020a62461bcd02815260040161018d906119d1565b600061128c826107e2565b905060008160038111156112a2576112a261183f565b14156112ac575050565b60028160038111156112c0576112c061183f565b14156112d157610fd9826000610fdd565b600160a060020a0382166000908152600660205260409020546005906112f990600190611a47565b8154811061130957611309611a5e565b60009182526020822060016002909202010154604080517f284e7ab30000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263284e7ab39260048084019382900301818387803b15801561137257600080fd5b505af1158015611386573d6000803e3d6000fd5b5060039250611393915050565b8160038111156113a5576113a561183f565b14156113b8576113b8826001600261156e565b610fd9826113c4565b50565b600160a060020a038116600090815260066020526040902054806113e6575050565b60055481146114fb57600580546000919061140390600190611a47565b8154811061141357611413611a5e565b6000918252602080832060029092029091018054600160a060020a0316835260069091526040909120839055905080600561144f600185611a47565b8154811061145f5761145f611a5e565b6000918252602090912082546002909202018054600160a060020a03198116600160a060020a0390931692831782558354919260ff60a060020a938490041692849274ffffffffffffffffffffffffffffffffffffffffff1916909117908360038111156114cf576114cf61183f565b021790555060019182015491018054600160a060020a031916600160a060020a03909216919091179055505b600580548061150c5761150c611b5b565b60008281526020808220600260001990940193840201805474ffffffffffffffffffffffffffffffffffffffffff191681556001018054600160a060020a031916905591909255600160a060020a039390931681526006909252506040812055565b600160a060020a0383166000908152602083905260409020548061159457611594611b74565b8154811461163457815460009083906115af90600190611a47565b815481106115bf576115bf611a5e565b6000918252602080832090910154600160a060020a0316808352908690526040909120839055905080836115f4600185611a47565b8154811061160457611604611a5e565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550505b8180548061164457611644611b5b565b6000828152602080822083016000199081018054600160a060020a0319169055909201909255600160a060020a039590951681529290935250604081205550565b600160a060020a038316600090815260066020526040902054156116ee5760405160e560020a62461bcd02815260206004820152601760248201527f52656c6174696f6e20616c726561647920657869737473000000000000000000604482015260640161018d565b6005604051806060016040528085600160a060020a0316815260200184600381111561171c5761171c61183f565b8152600160a060020a0380851660209283015283546001810185556000948552938290208351600290950201805494909116600160a060020a0319851681178255918301519293909291839174ffffffffffffffffffffffffffffffffffffffffff19161760a060020a8360038111156117985761179861183f565b02179055506040918201516001919091018054600160a060020a031916600160a060020a0392831617905560055494166000908152600660205220929092555050565b80151581146113c157600080fd5b6000602082840312156117fb57600080fd5b8135611806816117db565b9392505050565b600160a060020a03811681146113c157600080fd5b60006020828403121561183457600080fd5b81356118068161180d565b60e060020a634e487b7102600052602160045260246000fd5b602081016004831061187d5760e060020a634e487b7102600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b818110156118c4578351600160a060020a03168352928401929184019160010161189f565b50909695505050505050565b60006020808301818452808551808352604086019150604084820287010192508387016000805b8381101561195c57888603603f1901855282518051808852835b8181101561192c578281018a01518982018b01528901611911565b8181111561193c57848a838b0101525b50601f01601f1916969096018701955093860193918601916001016118f7565b509398975050505050505050565b6000806040838503121561197d57600080fd5b82356119888161180d565b915060208301356119988161180d565b809150509250929050565b600080604083850312156119b657600080fd5b82356119c18161180d565b91506020830135611998816117db565b6020808252602e908201527f5468652073656e6465722063616e206f6e6c792062652074686520706172656e60408201527f742055736572436f6e7472616374000000000000000000000000000000000000606082015260800190565b60e060020a634e487b7102600052601160045260246000fd5b600082821015611a5957611a59611a2e565b500390565b60e060020a634e487b7102600052603260045260246000fd5b600060208284031215611a8957600080fd5b81516118068161180d565b600060208284031215611aa657600080fd5b8151611806816117db565b600060208284031215611ac357600080fd5b5051919050565b60208082526031908201527f4f6e6c792061205065726d697373696f6e436f6e74726163742063616e20696e60408201527f69746961746520612072656c6174696f6e000000000000000000000000000000606082015260800190565b60e060020a634e487b7102600052604160045260246000fd5b6000600019821415611b5457611b54611a2e565b5060010190565b60e060020a634e487b7102600052603160045260246000fd5b60e060020a634e487b7102600052600160045260246000fdfea26469706673582212208d679c01deefae3e03cd40c77e9cadfa6755a25b7005618cc9de917b8739cfa964736f6c634300080c0033";

    public static final String FUNC_ADDPERMISSION = "addPermission";

    public static final String FUNC_ADDPERMISSIONINTERNAL = "addPermissionInternal";

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final String FUNC_CONFIRMRELATION = "confirmRelation";

    public static final String FUNC_EDITPERMISSION = "editPermission";

    public static final String FUNC_GETALLRECORDSMETADATA = "getAllRecordsMetadata";

    public static final String FUNC_GETALLRELATIONS = "getAllRelations";

    public static final String FUNC_GETASSOCIATEDUSERS = "getAssociatedUsers";

    public static final String FUNC_GETINITIALEDRELATIONS = "getInitialedRelations";

    public static final String FUNC_GETRECORDMETADATA = "getRecordMetadata";

    public static final String FUNC_GETRECORDSMETADATABYUSER = "getRecordsMetadataByUser";

    public static final String FUNC_GETRELATIONREQUESTS = "getRelationRequests";

    public static final String FUNC_INITRELATION = "initRelation";

    public static final String FUNC_REGISTRYCONTRACT = "registryContract";

    public static final String FUNC_REJECTRELATION = "rejectRelation";

    public static final String FUNC_RELATIONSCONTRACT = "relationsContract";

    public static final String FUNC_REMOVEPERMISSION = "removePermission";

    public static final String FUNC_REMOVEPERMISSIONINTERNAL = "removePermissionInternal";

    @Deprecated
    protected DoctorContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DoctorContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DoctorContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DoctorContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addPermission(String permissionsId, String user, BigInteger level, byte[] smk, byte[] encodedHash) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint8(level), 
                new org.web3j.abi.datatypes.DynamicBytes(smk), 
                new org.web3j.abi.datatypes.DynamicBytes(encodedHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPermissionInternal(String permissionsAddress) {
        final Function function = new Function(
                FUNC_ADDPERMISSIONINTERNAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRecord(String patientAddress, List<byte[]> patientData, List<byte[]> doctorData, String providerAddress, List<byte[]> providerData) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, patientAddress), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(patientData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(doctorData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.Address(160, providerAddress), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(providerData, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirmRelation(String user, Boolean confirmStatus) {
        final Function function = new Function(
                FUNC_CONFIRMRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.Bool(confirmStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> editPermission(String permissionsId, String user, BigInteger newLevel) {
        final Function function = new Function(
                FUNC_EDITPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint8(newLevel)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllRecordsMetadata() {
        final Function function = new Function(FUNC_GETALLRECORDSMETADATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllRelations() {
        final Function function = new Function(FUNC_GETALLRELATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAssociatedUsers() {
        final Function function = new Function(FUNC_GETASSOCIATEDUSERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getInitialedRelations() {
        final Function function = new Function(FUNC_GETINITIALEDRELATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<byte[], byte[]>> getRecordMetadata(String permissionsAddress) {
        final Function function = new Function(FUNC_GETRECORDMETADATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteFunctionCall<Tuple2<byte[], byte[]>>(function,
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getRecordsMetadataByUser(String associatedUser) {
        final Function function = new Function(FUNC_GETRECORDSMETADATABYUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, associatedUser)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getRelationRequests() {
        final Function function = new Function(FUNC_GETRELATIONREQUESTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initRelation(String user) {
        final Function function = new Function(
                FUNC_INITRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> registryContract() {
        final Function function = new Function(FUNC_REGISTRYCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> rejectRelation(String user) {
        final Function function = new Function(
                FUNC_REJECTRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> relationsContract() {
        final Function function = new Function(FUNC_RELATIONSCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removePermission(String permissionsId, String user) {
        final Function function = new Function(
                FUNC_REMOVEPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removePermissionInternal(String permissionsAddress) {
        final Function function = new Function(
                FUNC_REMOVEPERMISSIONINTERNAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DoctorContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DoctorContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DoctorContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DoctorContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DoctorContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DoctorContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DoctorContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DoctorContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DoctorContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DoctorContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DoctorContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DoctorContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
