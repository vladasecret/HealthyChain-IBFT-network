package org.web3j.contractWrapper.generated;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class AccountController extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b5060405161196a38038061196a83398101604081905261002f916100d9565b60028054600160a060020a031916600160a060020a038416179055604051610056906100b4565b604051809103906000f080158015610072573d6000803e3d6000fd5b5060008054600160a060020a03928316600160a060020a0319918216179091556001805493909216928116929092179055600380549091163317905550610113565b6109388061103283390190565b600160a060020a03811681146100d657600080fd5b50565b600080604083850312156100ec57600080fd5b82516100f7816100c1565b6020840151909250610108816100c1565b809150509250929050565b610f10806101226000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c010000000000000000000000000000000000000000000000000000000090048063a6e497b611610078578063a6e497b61461010d578063b583127d14610138578063c3c5a5471461014b578063c54f16921461015e57600080fd5b8063090fc537146100aa5780630ad2cd20146100bf57806312886441146100d2578063936421d5146100e5575b600080fd5b6100bd6100b8366004610bf9565b610171565b005b6100bd6100cd366004610bf9565b6101d6565b6100bd6100e0366004610bf9565b61040f565b6100f86100f3366004610c1d565b61070c565b60405190151581526020015b60405180910390f35b61012061011b366004610bf9565b610817565b604051600160a060020a039091168152602001610104565b6100bd610146366004610bf9565b610924565b6100f8610159366004610bf9565b610980565b6100bd61016c366004610bf9565b610ab0565b600354600160a060020a031633146101a75760405160e560020a62461bcd02815260040161019e90610cd2565b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60025460405160e260020a630935e01b028152336004820152600160a060020a03909116906324d7806c90602401602060405180830381865afa158015610221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102459190610d2f565b6102945760405160e560020a62461bcd02815260206004820152601860248201527f5468652073656e646572206d7573742062652061646d696e0000000000000000604482015260640161019e565b600160a060020a0381163b156102bf5760405160e560020a62461bcd02815260040161019e90610d51565b6102c881610980565b156102e85760405160e560020a62461bcd02815260040161019e90610dae565b600180546040517f6697a437000000000000000000000000000000000000000000000000000000008152600092600160a060020a0390921691636697a43791610335918691600401610e4f565b6020604051808303816000875af1158015610354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103789190610e6c565b6000546040517f287a074e000000000000000000000000000000000000000000000000000000008152919250600160a060020a03169063287a074e906103c79085906001908690600401610e89565b6020604051808303816000875af11580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190610d2f565b505050565b60025460405160e260020a630935e01b028152336004820152600160a060020a03909116906324d7806c90602401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190610d2f565b6104cd5760405160e560020a62461bcd02815260206004820152601860248201527f5468652073656e646572206d7573742062652061646d696e0000000000000000604482015260640161019e565b600160a060020a0381163b156104f85760405160e560020a62461bcd02815260040161019e90610d51565b61050181610980565b156105215760405160e560020a62461bcd02815260040161019e90610dae565b60025460405160e260020a630935e01b028152600160a060020a038381166004830152909116906324d7806c90602401602060405180830381865afa15801561056e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105929190610d2f565b61062d5760405160e560020a62461bcd02815260206004820152604160248201527f546f20726567697374657220616e206164647265737320617320612070726f7660448201527f696465722c206974206d75737420626520616e2061646d696e6973747261746f60648201527f7200000000000000000000000000000000000000000000000000000000000000608482015260a40161019e565b6001546040517f6697a437000000000000000000000000000000000000000000000000000000008152600091600160a060020a031690636697a4379061067a908590600290600401610e4f565b6020604051808303816000875af1158015610699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bd9190610e6c565b6000546040517f287a074e000000000000000000000000000000000000000000000000000000008152919250600160a060020a03169063287a074e906103c79085906002908690600401610e89565b60008415158061071b57508515155b156107285750600061080c565b600160a060020a0388163b6108085761074088610980565b806107b7575060025460405160e260020a630935e01b028152600160a060020a038a81166004830152909116906324d7806c90602401602060405180830381865afa158015610793573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b79190610d2f565b6107c35750600061080c565b600160a060020a0387161580156107e85750600354600160a060020a03898116911614155b806107fb5750600160a060020a0387163b155b156108085750600061080c565b5060015b979650505050505050565b600061082282610980565b6108975760405160e560020a62461bcd02815260206004820152602f60248201527f556e61626c6520746f206765742055736572436f6e74726163743a207573657260448201527f206e6f7420726567697374657265640000000000000000000000000000000000606482015260840161019e565b6000546040517fa6e497b6000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529091169063a6e497b690602401602060405180830381865afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190610e6c565b92915050565b600354600160a060020a031633146109515760405160e560020a62461bcd02815260040161019e90610cd2565b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600080546040517ff6a3d24e000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301529091169063f6a3d24e90602401602060405180830381865afa1580156109e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a089190610d2f565b801561091e57506000546040517f1f735227000000000000000000000000000000000000000000000000000000008152600160a060020a0384811660048301526003921690631f73522790602401602060405180830381865afa158015610a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a979190610eb9565b6003811115610aa857610aa8610de5565b141592915050565b600160a060020a0381163b15610adb5760405160e560020a62461bcd02815260040161019e90610d51565b610ae481610980565b15610b045760405160e560020a62461bcd02815260040161019e90610dae565b6001546040517f6697a437000000000000000000000000000000000000000000000000000000008152600091600160a060020a031690636697a43790610b509085908590600401610e4f565b6020604051808303816000875af1158015610b6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b939190610e6c565b600080546040517f287a074e000000000000000000000000000000000000000000000000000000008152929350600160a060020a03169163287a074e916103c7918691908690600401610e89565b600160a060020a0381168114610bf657600080fd5b50565b600060208284031215610c0b57600080fd5b8135610c1681610be1565b9392505050565b600080600080600080600060c0888a031215610c3857600080fd5b8735610c4381610be1565b96506020880135610c5381610be1565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff80821115610c8557600080fd5b818a0191508a601f830112610c9957600080fd5b813581811115610ca857600080fd5b8b6020828501011115610cba57600080fd5b60208301945080935050505092959891949750929550565b6020808252602e908201527f5468652073656e646572206d757374206265207468652063726561746f72206f60408201527f662074686520636f6e7472616374000000000000000000000000000000000000606082015260800190565b600060208284031215610d4157600080fd5b81518015158114610c1657600080fd5b6020808252602a908201527f52656769737465726564207573657220616464726573732063616e6e6f74206860408201527f617665206120636f646500000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f54686973207573657220697320616c7265616479207265676973746572656400604082015260600190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110610e4b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9052565b600160a060020a038316815260408101610c166020830184610e14565b600060208284031215610e7e57600080fd5b8151610c1681610be1565b600160a060020a0384811682526060820190610ea86020840186610e14565b808416604084015250949350505050565b600060208284031215610ecb57600080fd5b815160048110610c1657600080fdfea26469706673582212201eb89ffe9e104a77c17179f9c39fe5f0cb3fd281527d25c9cdd538377662e7f864736f6c634300080c0033608060405234801561001057600080fd5b5060028054600160a060020a03191633179055610906806100326000396000f3fe608060405234801561001057600080fd5b506004361061009a576000357c0100000000000000000000000000000000000000000000000000000000900480637b510fe8116100785780637b510fe8146100fe578063949d225d14610120578063a6e497b614610131578063f6a3d24e1461015c57600080fd5b80631f7352271461009f578063287a074e146100c857806329092d0e146100eb575b600080fd5b6100b26100ad366004610733565b610187565b6040516100bf919061078c565b60405180910390f35b6100db6100d63660046107a0565b61024b565b60405190151581526020016100bf565b6100db6100f9366004610733565b6103c5565b61011161010c366004610733565b610656565b6040516100bf939291906107e9565b6000546040519081526020016100bf565b61014461013f366004610733565b6106cd565b604051600160a060020a0390911681526020016100bf565b6100db61016a366004610733565b600160a060020a0316600090815260016020526040902054151590565b600160a060020a0381166000908152600160205260408120548061020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4163636f756e74206e6f7420726567697374657265640000000000000000000060448201526064015b60405180910390fd5b6000610219600183610819565b8154811061022957610229610841565b600091825260209091206002909102015460a060020a900460ff169392505050565b600254600090600160a060020a03163314610292576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102039061085a565b600160a060020a0384166000908152600160205260409020546103ba576000604051806060016040528086600160a060020a031681526020018560038111156102dd576102dd61074e565b8152600160a060020a038086166020928301528354600181018555600094855293829020835160029095020180549490911673ffffffffffffffffffffffffffffffffffffffff19851681178255918301519293909291839174ffffffffffffffffffffffffffffffffffffffffff19161760a060020a8360038111156103665761036661074e565b02179055506040918201516001918201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039283161790556000805491881681526020839052929092209190915590506103be565b5060005b9392505050565b600254600090600160a060020a0316331461040c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102039061085a565b600160a060020a038216600090815260016020526040902054801580159061043657506000548111155b1561064b5760005481146105c35760008054819061045690600190610819565b8154811061046657610466610841565b600091825260209182902060408051606081019091526002909202018054600160a060020a0381168352919290919083019060ff60a060020a9091041660038111156104b4576104b461074e565b60038111156104c5576104c561074e565b8152600191820154600160a060020a031660209091015290915081906000906104ee9085610819565b815481106104fe576104fe610841565b600091825260209182902083516002909202018054600160a060020a0390921673ffffffffffffffffffffffffffffffffffffffff198316811782559284015190929091839174ffffffffffffffffffffffffffffffffffffffffff199091161760a060020a8360038111156105765761057661074e565b02179055506040918201516001918201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039283161790559251909216600090815260209290925290208190555b60008054806105d4576105d46108b7565b60008281526020808220600260001990940193840201805474ffffffffffffffffffffffffffffffffffffffffff191681556001908101805473ffffffffffffffffffffffffffffffffffffffff1916905592909355600160a060020a038616815291819052604082209190915591506106519050565b60009150505b919050565b600160a060020a038116600090815260016020819052604082205482918291829182916106839190610819565b8154811061069357610693610841565b600091825260209091206002909102018054600190910154600160a060020a038083169860a060020a90930460ff16975016945092505050565b600160a060020a038116600090815260016020526040812054815482919081106106f9576106f9610841565b6000918252602090912060016002909202010154600160a060020a031692915050565b8035600160a060020a038116811461065157600080fd5b60006020828403121561074557600080fd5b6103be8261071c565b60e060020a634e487b7102600052602160045260246000fd5b600481106107885760e060020a634e487b7102600052602160045260246000fd5b9052565b6020810161079a8284610767565b92915050565b6000806000606084860312156107b557600080fd5b6107be8461071c565b92506020840135600481106107d257600080fd5b91506107e06040850161071c565b90509250925092565b600160a060020a03848116825260608201906108086020840186610767565b808416604084015250949350505050565b60008282101561083c5760e060020a634e487b7102600052601160045260246000fd5b500390565b60e060020a634e487b7102600052603260045260246000fd5b6020808252602c908201527f5468652073656e646572206d75737420626520746865206f776e6572206f662060408201527f74686520636f6e74726163740000000000000000000000000000000000000000606082015260800190565b60e060020a634e487b7102600052603160045260246000fdfea26469706673582212201fd825359774257e98ab0bbb433e080ec2e30c3c4acd86fccffa741892900cbb64736f6c634300080c0033";

    public static final String FUNC_GETUSERCONTRACTADDRESS = "getUserContractAddress";

    public static final String FUNC_ISREGISTERED = "isRegistered";

    public static final String FUNC_REGISTRYDOCTOR = "registryDoctor";

    public static final String FUNC_REGISTRYPATIENT = "registryPatient";

    public static final String FUNC_REGISTRYPROVIDER = "registryProvider";

    public static final String FUNC_SETACCOUNTSTORAGE = "setAccountStorage";

    public static final String FUNC_SETUSERCONTRACTSFACTORY = "setUserContractsFactory";

    public static final String FUNC_TRANSACTIONALLOWED = "transactionAllowed";

    @Deprecated
    protected AccountController(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AccountController(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AccountController(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AccountController(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> getUserContractAddress(String account) {
        final Function function = new Function(FUNC_GETUSERCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isRegistered(String account) {
        final Function function = new Function(FUNC_ISREGISTERED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> registryDoctor(String account) {
        final Function function = new Function(
                FUNC_REGISTRYDOCTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registryPatient(String account) {
        final Function function = new Function(
                FUNC_REGISTRYPATIENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> registryProvider(String account) {
        final Function function = new Function(
                FUNC_REGISTRYPROVIDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAccountStorage(String _accountStorage) {
        final Function function = new Function(
                FUNC_SETACCOUNTSTORAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _accountStorage)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUserContractsFactory(String _userContractFactory) {
        final Function function = new Function(
                FUNC_SETUSERCONTRACTSFACTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _userContractFactory)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> transactionAllowed(String sender, String target, BigInteger value, BigInteger gasPrice, BigInteger gasLimit, byte[] payload) {
        final Function function = new Function(FUNC_TRANSACTIONALLOWED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sender), 
                new org.web3j.abi.datatypes.Address(160, target), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.generated.Uint256(gasPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(gasLimit), 
                new org.web3j.abi.datatypes.DynamicBytes(payload)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static AccountController load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccountController(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AccountController load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccountController(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AccountController load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AccountController(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AccountController load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AccountController(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AccountController> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _registryContract, String _userContractFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registryContract), 
                new org.web3j.abi.datatypes.Address(160, _userContractFactory)));
        return deployRemoteCall(AccountController.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<AccountController> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _registryContract, String _userContractFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registryContract), 
                new org.web3j.abi.datatypes.Address(160, _userContractFactory)));
        return deployRemoteCall(AccountController.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AccountController> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _registryContract, String _userContractFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registryContract), 
                new org.web3j.abi.datatypes.Address(160, _userContractFactory)));
        return deployRemoteCall(AccountController.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AccountController> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _registryContract, String _userContractFactory) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _registryContract), 
                new org.web3j.abi.datatypes.Address(160, _userContractFactory)));
        return deployRemoteCall(AccountController.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
