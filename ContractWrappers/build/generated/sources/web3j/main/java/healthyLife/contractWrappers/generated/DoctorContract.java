package healthyLife.contractWrappers.generated;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class DoctorContract extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162004ec738038062004ec78339810160408190526200003491620000ea565b60008054600160a060020a03808516600160a060020a0319928316179092556001805492841692909116919091179055604051829082906200007690620000bf565b604051809103906000f08015801562000093573d6000803e3d6000fd5b5060028054600160a060020a031916600160a060020a0392909216919091179055506200012292505050565b611e44806200308383390190565b8051600160a060020a0381168114620000e557600080fd5b919050565b60008060408385031215620000fe57600080fd5b6200010983620000cd565b91506200011960208401620000cd565b90509250929050565b612f5180620001326000396000f3fe608060405234801561001057600080fd5b50600436106101305760003560e060020a90048063887ac8e1116100b1578063c0f10fb811610075578063c0f10fb81461027f578063c6a3f64814610292578063e3d35bc9146102a5578063f4f6c320146102b8578063fd2de0ca146102c057600080fd5b8063887ac8e11461021d578063893d20e814610225578063986de4f91461023657806399eb1b5314610249578063afa33ea51461025c57600080fd5b806337ab35e0116100f857806337ab35e0146101b957806341dd11d3146101c157806349d05584146101d4578063511c6e14146101f55780635d25d8701461020857600080fd5b80630cef3d3c146101355780631dbb5f1b146101535780632879191b1461017e57806328c1f99b146101935780633709edce146101a6575b600080fd5b61013d6102d3565b60405161014a9190612516565b60405180910390f35b60025461016690600160a060020a031681565b604051600160a060020a03909116815260200161014a565b61019161018c36600461258a565b61036c565b005b60015461016690600160a060020a031681565b6101916101b43660046125d1565b610429565b61013d6108eb565b6101916101cf366004612640565b61099e565b6101e76101e23660046125d1565b610dee565b60405161014a92919061275d565b610191610203366004612853565b610f2c565b6102106111ff565b60405161014a91906128ed565b6102106112ad565b600054600160a060020a0316610166565b6102106102443660046125d1565b61147b565b61019161025736600461294e565b611766565b61026f61026a3660046125d1565b6119f8565b604051901515815260200161014a565b61019161028d3660046125d1565b611a9b565b6101916102a03660046125d1565b611cc8565b6101916102b3366004612995565b611e8b565b61013d611f0b565b6101916102ce3660046125d1565b611f91565b600054606090600160a060020a0316331461030c5760405160e560020a62461bcd028152600401610303906129c3565b60405180910390fd5b600680548060200260200160405190810160405280929190818152602001828054801561036257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610344575b5050505050905090565b600054600160a060020a031633146103995760405160e560020a62461bcd028152600401610303906129c3565b6103a283612039565b6103ab57600080fd5b6040517fb919dfff000000000000000000000000000000000000000000000000000000008152600160a060020a0384169063b919dfff906103f29085908590600401612a5e565b600060405180830381600087803b15801561040c57600080fd5b505af1158015610420573d6000803e3d6000fd5b50505050505050565b600054600160a060020a031633146104565760405160e560020a62461bcd028152600401610303906129c3565b6001546040517ffe9fbb80000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301529091169063fe9fbb8090602401602060405180830381865afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190612a7b565b6105525760405160e560020a62461bcd02815260206004820152602c60248201527f556e61626c6520746f20636f6d6d756e6963617465207769746820756e61757460448201527f686f72697a6564207573657200000000000000000000000000000000000000006064820152608401610303565b6001546040805160e060020a63369d40870281529051600160a060020a039092169163f35b2ad391839163369d4087916004808201926020929091908290030181865afa1580156105a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cb9190612a98565b6040518263ffffffff1660e060020a0281526004016105ec91815260200190565b602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190612a7b565b6106c85760405160e560020a62461bcd02815260206004820152604c60248201527f497420697320696d706f737369626c6520746f20696e6974696174652061207260448201527f656c6174696f6e20776974686f75742061204163636f756e74436f6e74726f6c60648201527f6c657220636f6e74726163740000000000000000000000000000000000000000608482015260a401610303565b6001546040805160e060020a63369d40870281529051600092600160a060020a031691630d2020dd91839163369d40879160048083019260209291908290030181865afa15801561071d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107419190612a98565b6040518263ffffffff1660e060020a02815260040161076291815260200190565b602060405180830381865afa15801561077f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a39190612ab1565b60025460405160e160020a6353724bdb028152600160a060020a0385811660048301529293509082169163b2224a6591859185169063a6e497b6906024016020604051808303816000875af1158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190612ab1565b600160a060020a0316631dbb5f1b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610864573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108889190612ab1565b60405160e060020a63ffffffff8516028152600160a060020a039283166004820152911660248201526044015b600060405180830381600087803b1580156108cf57600080fd5b505af11580156108e3573d6000803e3d6000fd5b505050505050565b600054606090600160a060020a0316331461091b5760405160e560020a62461bcd028152600401610303906129c3565b600260009054906101000a9004600160a060020a0316600160a060020a03166337ab35e06040518163ffffffff1660e060020a028152600401600060405180830381865afa158015610971573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109999190810190612af2565b905090565b6002546040517f30ccebb5000000000000000000000000000000000000000000000000000000008152326004820152600191600160a060020a0316906330ccebb590602401602060405180830381865afa158015610a00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a249190612b96565b6003811115610a3557610a35612a20565b14610a3f57600080fd5b6001546040805160e060020a63369d408702815290518a92600092600160a060020a0390911691630d2020dd91839163369d4087916004808201926020929091908290030181865afa158015610a99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abd9190612a98565b6040518263ffffffff1660e060020a028152600401610ade91815260200190565b602060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1f9190612ab1565b905060006040517f1f735227000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152831690631f73522790602401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba69190612b96565b6003811115610bb757610bb7612a20565b14610c075760405160e560020a62461bcd02815260206004820152601660248201527f55736572206d75737420626520612070617469656e74000000000000000000006044820152606401610303565b6001546040805160e060020a63369d40870281529051600092600160a060020a031691630d2020dd91839163369d40879160048083019260209291908290030181865afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c809190612a98565b6040518263ffffffff1660e060020a028152600401610ca191815260200190565b602060405180830381865afa158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce29190612ab1565b60405160e160020a6353724bdb028152600160a060020a038d8116600483015291925060009183169063a6e497b6906024016020604051808303816000875af1158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d579190612ab1565b600160a060020a03166340451c528c8c8c8c8c8c8c6040518863ffffffff1660e060020a028152600401610d919796959493929190612c51565b6020604051808303816000875af1158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190612ab1565b9050610de0818d612056565b505050505050505050505050565b6000546060908190600160a060020a03163314610e205760405160e560020a62461bcd028152600401610303906129c3565b610e2983612039565b610e9e5760405160e560020a62461bcd02815260206004820152602360248201527f7065726d697373696f6e73206164647265737320646f6573206e6f742065786960448201527f73747300000000000000000000000000000000000000000000000000000000006064820152608401610303565b6040517f2a50c146000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03841690632a50c14690602401600060405180830381865afa158015610efb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f239190810190612cf7565b91509150915091565b600054600160a060020a03163314610f595760405160e560020a62461bcd028152600401610303906129c3565b610f6285612039565b610fb15760405160e560020a62461bcd02815260206004820152601c60248201527f5065726d697373696f6e73496420646f6573206e6f74206578697374000000006044820152606401610303565b6040517f9b1814ef0000000000000000000000000000000000000000000000000000000081528590600160a060020a03821690639b1814ef90610ffe908890889088908890600401612d5b565b600060405180830381600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b50506001546040805160e060020a63369d4087028152905160009450600160a060020a039092169250630d2020dd91839163369d40879160048083019260209291908290030181865afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab9190612a98565b6040518263ffffffff1660e060020a0281526004016110cc91815260200190565b602060405180830381865afa1580156110e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110d9190612ab1565b60405160e160020a6353724bdb028152600160a060020a0388811660048301529192509082169063a6e497b6906024016020604051808303816000875af115801561115c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111809190612ab1565b6040517fc0f10fb8000000000000000000000000000000000000000000000000000000008152600160a060020a038981166004830152919091169063c0f10fb890602401600060405180830381600087803b1580156111de57600080fd5b505af11580156111f2573d6000803e3d6000fd5b5050505050505050505050565b600054606090600160a060020a0316331461122f5760405160e560020a62461bcd028152600401610303906129c3565b600260009054906101000a9004600160a060020a0316600160a060020a0316635d25d8706040518163ffffffff1660e060020a028152600401600060405180830381865afa158015611285573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109999190810190612d9c565b600054606090600160a060020a031633146112dd5760405160e560020a62461bcd028152600401610303906129c3565b60045460009067ffffffffffffffff8111156112fb576112fb61278b565b60405190808252806020026020018201604052801561132e57816020015b60608152602001906001900390816113195790505b50905060005b6004548110156114755760006004828154811061135357611353612e4a565b60009182526020822060029190910201546040517f2a50c146000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a03909116925081908390632a50c14690602401600060405180830381865afa1580156113c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113ef9190810190612cf7565b915091506004848154811061140657611406612e4a565b60009182526020918290206002909102015460405161143592600160a060020a03909216918591859101612e63565b60405160208183030381529060405285858151811061145657611456612e4a565b60200260200101819052505050508061146e90612ed0565b9050611334565b50905090565b600054606090600160a060020a031633146114ab5760405160e560020a62461bcd028152600401610303906129c3565b600160a060020a0382166000908152600560205260409020546115135760405160e560020a62461bcd02815260206004820152601360248201527f55736572206e6f74206173736f636961746564000000000000000000000000006044820152606401610303565b600160a060020a0382166000908152600860205260408120805490919067ffffffffffffffff8111156115485761154861278b565b60405190808252806020026020018201604052801561157b57816020015b60608152602001906001900390816115665790505b50905060005b825481101561175c5782818154811061159c5761159c612e4a565b6000918252602090912001546040517f1709ef0700000000000000000000000000000000000000000000000000000000815233600482018190526024820152600160a060020a0390911690631709ef0790604401602060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116319190612a7b565b1561174c5760008084838154811061164b5761164b612e4a565b6000918252602090912001546040517f2a50c146000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0390911690632a50c14690602401600060405180830381865afa1580156116b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116dd9190810190612cf7565b915091508483815481106116f3576116f3612e4a565b6000918252602091829020015460405161171d92600160a060020a03909216918591859101612e63565b60405160208183030381529060405284848151811061173e5761173e612e4a565b602002602001018190525050505b61175581612ed0565b9050611581565b509150505b919050565b600054600160a060020a031633146117935760405160e560020a62461bcd028152600401610303906129c3565b61179c82612039565b6117eb5760405160e560020a62461bcd02815260206004820152601c60248201527f5065726d697373696f6e73496420646f6573206e6f74206578697374000000006044820152606401610303565b6040517fe074bb47000000000000000000000000000000000000000000000000000000008152600160a060020a03828116600483015283169063e074bb4790602401600060405180830381600087803b15801561184757600080fd5b505af115801561185b573d6000803e3d6000fd5b50506001546040805160e060020a63369d4087028152905160009450600160a060020a039092169250630d2020dd91839163369d40879160048083019260209291908290030181865afa1580156118b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118da9190612a98565b6040518263ffffffff1660e060020a0281526004016118fb91815260200190565b602060405180830381865afa158015611918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193c9190612ab1565b60405160e160020a6353724bdb028152600160a060020a0384811660048301529192509082169063a6e497b6906024016020604051808303816000875af115801561198b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119af9190612ab1565b6040517fc6a3f648000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152919091169063c6a3f648906024016103f2565b600060016002546040517f30ccebb5000000000000000000000000000000000000000000000000000000008152600160a060020a038581166004830152909116906330ccebb590602401602060405180830381865afa158015611a5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a839190612b96565b6003811115611a9457611a94612a20565b1492915050565b6001546040805160e060020a63369d408702815290513292600092600160a060020a0390911691630d2020dd91839163369d4087916004808201926020929091908290030181865afa158015611af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b199190612a98565b6040518263ffffffff1660e060020a028152600401611b3a91815260200190565b602060405180830381865afa158015611b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7b9190612ab1565b60405160e160020a6353724bdb028152600160a060020a038481166004830152919250339183169063a6e497b6906024016020604051808303816000875af1158015611bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bef9190612ab1565b600160a060020a031614611c485760405160e560020a62461bcd02815260206004820152601f60248201527f5468652073656e646572206d7573742062652055736572436f6e7472616374006044820152606401610303565b611c5183612039565b611cc357611cc38384600160a060020a031663279512916040518163ffffffff1660e060020a028152600401602060405180830381865afa158015611c9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cbe9190612ab1565b612056565b505050565b6001546040805160e060020a63369d408702815290513292600092600160a060020a0390911691630d2020dd91839163369d4087916004808201926020929091908290030181865afa158015611d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d469190612a98565b6040518263ffffffff1660e060020a028152600401611d6791815260200190565b602060405180830381865afa158015611d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da89190612ab1565b60405160e160020a6353724bdb028152600160a060020a038481166004830152919250339183169063a6e497b6906024016020604051808303816000875af1158015611df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c9190612ab1565b600160a060020a031614611e755760405160e560020a62461bcd02815260206004820152601f60248201527f5468652073656e646572206d7573742062652055736572436f6e7472616374006044820152606401610303565b611e7e83612039565b611cc357611cc3836121ca565b600054600160a060020a03163314611eb85760405160e560020a62461bcd028152600401610303906129c3565b6002546040517fc20a44c6000000000000000000000000000000000000000000000000000000008152600160a060020a03848116600483015283151560248301529091169063c20a44c6906044016108b5565b600054606090600160a060020a03163314611f3b5760405160e560020a62461bcd028152600401610303906129c3565b600260009054906101000a9004600160a060020a0316600160a060020a031663f4f6c3206040518163ffffffff1660e060020a028152600401600060405180830381865afa158015610971573d6000803e3d6000fd5b600054600160a060020a03163314611fbe5760405160e560020a62461bcd028152600401610303906129c3565b6002546040517ffd2de0ca000000000000000000000000000000000000000000000000000000008152600160a060020a0383811660048301529091169063fd2de0ca90602401600060405180830381600087803b15801561201e57600080fd5b505af1158015612032573d6000803e3d6000fd5b5050505050565b600160a060020a0316600090815260036020526040902054151590565b604080518082018252600160a060020a03848116808352848216602080850182815260048054600180820183556000838152985160029092027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b81018054938a1673ffffffffffffffffffffffffffffffffffffffff1994851617905593517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c909401805494909816938216939093179096555484875260038352878720558286526008825286862080549182018155808752828720909101805490951684179094558185529254600784528585209285529183528484209190915582526005905220546121c657600680546001810182557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0384169081179091559054600091825260056020526040909120555b5050565b6121d381612039565b6121da5750565b600160a060020a038116600090815260036020526040812054906004612201600184612eeb565b8154811061221157612211612e4a565b6000918252602090912060016002909202010154600454600160a060020a03909116915082146122f657600480546000919061224f90600190612eeb565b8154811061225f5761225f612e4a565b9060005260206000209060020201905080600460018561227f9190612eeb565b8154811061228f5761228f612e4a565b600091825260208083208454600290930201805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03948516178255600195860154959091018054909116948316949094179093559254909216825260039052604090208290555b600480548061230757612307612f02565b60008281526020808220600260001990940193840201805473ffffffffffffffffffffffffffffffffffffffff1990811682556001919091018054909116905591909255600160a060020a03858116835260038252604080842084905590841683526007825280832060089092529091206123839185916123a9565b600160a060020a038116600090815260086020526040902054611cc357611cc381600560065b600160a060020a038316600090815260208390526040902054806124125760405160e560020a62461bcd02815260206004820152601360248201527f4974656d20646f6573206e6f74206578697374000000000000000000000000006044820152606401610303565b815481146124b8578154600090839061242d90600190612eeb565b8154811061243d5761243d612e4a565b600091825260209091200154600160a060020a031690508083612461600185612eeb565b8154811061247157612471612e4a565b6000918252602080832091909101805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0394851617905592909116815290849052604090208190555b818054806124c8576124c8612f02565b600082815260208082208301600019908101805473ffffffffffffffffffffffffffffffffffffffff19169055909201909255600160a060020a039590951681529290935250604081205550565b6020808252825182820181905260009190848201906040850190845b81811015612557578351600160a060020a031683529284019291840191600101612532565b50909695505050505050565b600160a060020a038116811461257857600080fd5b50565b80356003811061176157600080fd5b60008060006060848603121561259f57600080fd5b83356125aa81612563565b925060208401356125ba81612563565b91506125c86040850161257b565b90509250925092565b6000602082840312156125e357600080fd5b81356125ee81612563565b9392505050565b60008083601f84011261260757600080fd5b50813567ffffffffffffffff81111561261f57600080fd5b602083019150836020808302850101111561263957600080fd5b9250929050565b60008060008060008060008060a0898b03121561265c57600080fd5b883561266781612563565b9750602089013567ffffffffffffffff8082111561268457600080fd5b6126908c838d016125f5565b909950975060408b01359150808211156126a957600080fd5b6126b58c838d016125f5565b909750955060608b013591506126ca82612563565b90935060808a013590808211156126e057600080fd5b506126ed8b828c016125f5565b999c989b5096995094979396929594505050565b60005b8381101561271c578181015183820152602001612704565b8381111561272b576000848401525b50505050565b60008151808452612749816020860160208601612701565b601f01601f19169290920160200192915050565b6040815260006127706040830185612731565b82810360208401526127828185612731565b95945050505050565b60e060020a634e487b7102600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156127cd576127cd61278b565b604052919050565b600067ffffffffffffffff8211156127ef576127ef61278b565b50601f01601f191660200190565b600082601f83011261280e57600080fd5b813561282161281c826127d5565b6127a4565b81815284602083860101111561283657600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561286b57600080fd5b853561287681612563565b9450602086013561288681612563565b93506128946040870161257b565b9250606086013567ffffffffffffffff808211156128b157600080fd5b6128bd89838a016127fd565b935060808801359150808211156128d357600080fd5b506128e0888289016127fd565b9150509295509295909350565b600060208083018184528085518083526040860191506040848202870101925083870160005b8281101561294157603f1988860301845261292f858351612731565b94509285019290850190600101612913565b5092979650505050505050565b6000806040838503121561296157600080fd5b823561296c81612563565b9150602083013561297c81612563565b809150509250929050565b801515811461257857600080fd5b600080604083850312156129a857600080fd5b82356129b381612563565b9150602083013561297c81612987565b6020808252602c908201527f5468652073656e646572206d75737420626520746865206f776e6572206f662060408201527f74686520636f6e74726163740000000000000000000000000000000000000000606082015260800190565b60e060020a634e487b7102600052602160045260246000fd5b60038110612a5a5760e060020a634e487b7102600052602160045260246000fd5b9052565b600160a060020a0383168152604081016125ee6020830184612a39565b600060208284031215612a8d57600080fd5b81516125ee81612987565b600060208284031215612aaa57600080fd5b5051919050565b600060208284031215612ac357600080fd5b81516125ee81612563565b600067ffffffffffffffff821115612ae857612ae861278b565b5060209081020190565b60006020808385031215612b0557600080fd5b825167ffffffffffffffff811115612b1c57600080fd5b8301601f81018513612b2d57600080fd5b8051612b3b61281c82612ace565b81815290830282018301908381019087831115612b5757600080fd5b928401925b82841015612b7e578351612b6f81612563565b82529284019290840190612b5c565b979650505050505050565b6004811061257857600080fd5b600060208284031215612ba857600080fd5b81516125ee81612b89565b818352602080840193600091908185020181018584845b87811015612c445782840389528135601e19883603018112612beb57600080fd5b8701803567ffffffffffffffff811115612c0457600080fd5b803603891315612c1357600080fd5b8086528087830188880137600086820188015299860199601f01601f19169094018501935090840190600101612bca565b5091979650505050505050565b608081526000612c6560808301898b612bb3565b8281036020840152612c7881888a612bb3565b9050600160a060020a03861660408401528281036060840152612c9c818587612bb3565b9a9950505050505050505050565b600082601f830112612cbb57600080fd5b8151612cc961281c826127d5565b818152846020838601011115612cde57600080fd5b612cef826020830160208701612701565b949350505050565b60008060408385031215612d0a57600080fd5b825167ffffffffffffffff80821115612d2257600080fd5b612d2e86838701612caa565b93506020850151915080821115612d4457600080fd5b50612d5185828601612caa565b9150509250929050565b600160a060020a0385168152612d746020820185612a39565b608060408201526000612d8a6080830185612731565b8281036060840152612b7e8185612731565b60006020808385031215612daf57600080fd5b825167ffffffffffffffff80821115612dc757600080fd5b818501915085601f830112612ddb57600080fd5b8151612de961281c82612ace565b81815290840283018401908481019088831115612e0557600080fd5b8585015b83811015612e3d57805185811115612e215760008081fd5b612e2f8b89838a0101612caa565b845250918601918601612e09565b5098975050505050505050565b60e060020a634e487b7102600052603260045260246000fd5b6c01000000000000000000000000600160a060020a03851602815260008351612e93816014850160208801612701565b835190830190612eaa816014840160208801612701565b0160140195945050505050565b60e060020a634e487b7102600052601160045260246000fd5b6000600019821415612ee457612ee4612eb7565b5060010190565b600082821015612efd57612efd612eb7565b500390565b60e060020a634e487b7102600052603160045260246000fdfea26469706673582212209de7ad4f17d5184063f67e76ac933e8281ad48906c334b064030ce826dbcd39f64736f6c634300080c0033608060405234801561001057600080fd5b5060008054600160a060020a03191633179055611e12806100326000396000f3fe608060405234801561001057600080fd5b50600436106100a25760003560e060020a900480635d25d8701161006a5780635d25d8701461010a578063b2224a651461011f578063c20a44c614610132578063f4f6c32014610145578063fd2de0ca1461014d57600080fd5b806302e5c0e5146100a7578063284e7ab3146100bc57806330ccebb5146100c457806337ab35e0146100ed57806349d1bb0614610102575b600080fd5b6100ba6100b5366004611a38565b610160565b005b6100ba6105f1565b6100d76100d2366004611a71565b610a31565b6040516100e49190611aa7565b60405180910390f35b6100f5610ab0565b6040516100e49190611ad2565b6100ba610b40565b610112610fa3565b6040516100e49190611b1f565b6100ba61012d366004611bb9565b6110c6565b6100ba610140366004611bf2565b61122c565b6100f5611415565b6100ba61015b366004611a71565b6114a3565b3260009081526006602052604090205480158015906101c7575060036005610189600184611c39565b8154811061019957610199611c50565b600091825260209091206002909102015460a060020a900460ff1660038111156101c5576101c5611a8e565b145b801561020b57503360056101dc600184611c39565b815481106101ec576101ec611c50565b6000918252602090912060016002909202010154600160a060020a0316145b801561024c5750600561021f600183611c39565b8154811061022f5761022f611c50565b6000918252602090912060029091020154600160a060020a031632145b6102a05760405160e560020a62461bcd02815260206004820152601f60248201527f496e636f72726563742072656c6174696f6e20636f6e6669726d6174696f6e0060448201526064015b60405180910390fd5b60008060009054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156102f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031b9190611c69565b9050600081600160a060020a0316630d2020dd83600160a060020a031663369d40876040518163ffffffff1660e060020a028152600401602060405180830381865afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190611c86565b6040518263ffffffff1660e060020a0281526004016103b491815260200190565b602060405180830381865afa1580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f59190611c69565b9050600160a060020a03811615610518576040517fa6e497b60000000000000000000000000000000000000000000000000000000081523260048201523390600160a060020a0383169063a6e497b6906024016020604051808303816000875af1158015610467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048b9190611c69565b600160a060020a0316631dbb5f1b6040518163ffffffff1660e060020a028152600401602060405180830381865afa1580156104cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ef9190611c69565b600160a060020a0316146105185760405160e560020a62461bcd02815260040161029790611c9f565b3260008181526006602052604090205485156105d3576001600561053c8284611c39565b8154811061054c5761054c611c50565b60009182526020909120600290910201805474ff0000000000000000000000000000000000000000191660a060020a83600381111561058d5761058d611a8e565b0217905550604051600160a060020a03831681527fda2501f9553cdefbb3ef3dfef0510beffb546b1947542a5eb088110f85e3eb089060200160405180910390a16105dc565b6105dc82611613565b6105e982600160026117bd565b505050505050565b60008054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106699190611c69565b6040517ffe9fbb80000000000000000000000000000000000000000000000000000000008152326004820152600160a060020a03919091169063fe9fbb8090602401602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190611cfc565b61073b5760405160e560020a62461bcd02815260206004820152601d60248201527f5468652073656e646572206d75737420626520726567697374657265640000006044820152606401610297565b60008060009054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190611c69565b9050600081600160a060020a0316630d2020dd83600160a060020a031663369d40876040518163ffffffff1660e060020a028152600401602060405180830381865afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190611c86565b6040518263ffffffff1660e060020a02815260040161084f91815260200190565b602060405180830381865afa15801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190611c69565b9050600160a060020a038116156109b3576040517fa6e497b60000000000000000000000000000000000000000000000000000000081523260048201523390600160a060020a0383169063a6e497b6906024016020604051808303816000875af1158015610902573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109269190611c69565b600160a060020a0316631dbb5f1b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190611c69565b600160a060020a0316146109b35760405160e560020a62461bcd02815260040161029790611c9f565b3260006109bf82610a31565b905060018160038111156109d5576109d5611a8e565b14806109f2575060028160038111156109f0576109f0611a8e565b145b6109fb57600080fd5b6002816003811115610a0f57610a0f611a8e565b1415610a2257610a2282600360046117bd565b610a2b82611613565b50505050565b600160a060020a03811660009081526006602052604081205415610aa857600160a060020a038216600090815260066020526040902054600590610a7790600190611c39565b81548110610a8757610a87611c50565b600091825260209091206002909102015460a060020a900460ff1692915050565b506000919050565b600054606090600160a060020a03163314610ae05760405160e560020a62461bcd02815260040161029790611d19565b6002805480602002602001604051908101604052809291908181526020018280548015610b3657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610b18575b5050505050905090565b60008054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190611c69565b6040517ffe9fbb80000000000000000000000000000000000000000000000000000000008152326004820152600160a060020a03919091169063fe9fbb8090602401602060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b9190611cfc565b610c8a5760405160e560020a62461bcd02815260206004820152601d60248201527f5468652073656e646572206d75737420626520726567697374657265640000006044820152606401610297565b60008060009054906101000a9004600160a060020a0316600160a060020a03166328c1f99b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d059190611c69565b9050600081600160a060020a0316630d2020dd83600160a060020a031663369d40876040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190611c86565b6040518263ffffffff1660e060020a028152600401610d9e91815260200190565b602060405180830381865afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf9190611c69565b9050600160a060020a03811615610f02576040517fa6e497b60000000000000000000000000000000000000000000000000000000081523260048201523390600160a060020a0383169063a6e497b6906024016020604051808303816000875af1158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e759190611c69565b600160a060020a0316631dbb5f1b6040518163ffffffff1660e060020a028152600401602060405180830381865afa158015610eb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed99190611c69565b600160a060020a031614610f025760405160e560020a62461bcd02815260040161029790611c9f565b32610f0f816002336118d4565b600480546001810182557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054600160a060020a031916600160a060020a038416908117909155905460008281526003602090815260409182902092909255519182527fab01c3d52fcb31a206264ecbb4e1eb54c97cb19fea28f94932058f6ebbc83148910160405180910390a1505050565b60055460609060009067ffffffffffffffff811115610fc457610fc4611d76565b604051908082528060200260200182016040528015610ff757816020015b6060815260200190600190039081610fe25790505b50905060005b6005548110156110c05760006005828154811061101c5761101c611c50565b600091825260209091206002909102018054909150600160a060020a0381169060a060020a900460ff16600381111561105757611057611a8e565b604051600160a060020a03929092166c0100000000000000000000000002602083015260348201526054016040516020818303038152906040528383815181106110a3576110a3611c50565b602002602001018190525050806110b990611d8f565b9050610ffd565b50919050565b600054600160a060020a031633146110f35760405160e560020a62461bcd02815260040161029790611d19565b60006110fe83610a31565b9050600381600381111561111457611114611a8e565b14806111315750600181600381111561112f5761112f611a8e565b145b1561113b57505050565b600281600381111561114f5761114f611a8e565b14156111655761116083600161122c565b611226565b81600160a060020a03166349d1bb066040518163ffffffff1660e060020a028152600401600060405180830381600087803b1580156111a357600080fd5b505af11580156111b7573d6000803e3d6000fd5b505050506111c7836003846118d4565b60028054600180820183557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace9091018054600160a060020a031916600160a060020a038716908117909155915460009283526020919091526040909120555b505b5050565b600054600160a060020a031633146112595760405160e560020a62461bcd02815260040161029790611d19565b600061126483610a31565b9050600181600381111561127a5761127a611a8e565b141561128557505050565b600281600381111561129957611299611a8e565b1461130f5760405160e560020a62461bcd02815260206004820152603860248201527f54686520726571756573742063616e6e6f742062652070726f6365737365642060448201527f6265636175736520697420646f65736e277420657869737400000000000000006064820152608401610297565b600160a060020a03831660009081526006602052604081205460059061133790600190611c39565b8154811061134757611347611c50565b6000918252602090912060029091020160018101546040517f02e5c0e50000000000000000000000000000000000000000000000000000000081528515156004820152919250600160a060020a0316906302e5c0e590602401600060405180830381600087803b1580156113ba57600080fd5b505af11580156113ce573d6000803e3d6000fd5b5050505082156113ff57805474ff0000000000000000000000000000000000000000191660a060020a178155611408565b61140884611613565b610a2b84600360046117bd565b600054606090600160a060020a031633146114455760405160e560020a62461bcd02815260040161029790611d19565b6004805480602002602001604051908101604052809291908181526020018280548015610b3657602002820191906000526020600020908154600160a060020a03168152600190910190602001808311610b18575050505050905090565b600054600160a060020a031633146114d05760405160e560020a62461bcd02815260040161029790611d19565b60006114db82610a31565b905060008160038111156114f1576114f1611a8e565b14156114fb575050565b600281600381111561150f5761150f611a8e565b14156115205761122882600061122c565b600160a060020a03821660009081526006602052604090205460059061154890600190611c39565b8154811061155857611558611c50565b60009182526020822060016002909202010154604080517f284e7ab30000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263284e7ab39260048084019382900301818387803b1580156115c157600080fd5b505af11580156115d5573d6000803e3d6000fd5b50600392506115e2915050565b8160038111156115f4576115f4611a8e565b14156116075761160782600160026117bd565b61122882611613565b50565b600160a060020a03811660009081526006602052604090205480611635575050565b600554811461174a57600580546000919061165290600190611c39565b8154811061166257611662611c50565b6000918252602080832060029092029091018054600160a060020a0316835260069091526040909120839055905080600561169e600185611c39565b815481106116ae576116ae611c50565b6000918252602090912082546002909202018054600160a060020a03198116600160a060020a0390931692831782558354919260ff60a060020a938490041692849274ffffffffffffffffffffffffffffffffffffffffff19169091179083600381111561171e5761171e611a8e565b021790555060019182015491018054600160a060020a031916600160a060020a03909216919091179055505b600580548061175b5761175b611daa565b60008281526020808220600260001990940193840201805474ffffffffffffffffffffffffffffffffffffffffff191681556001018054600160a060020a031916905591909255600160a060020a039390931681526006909252506040812055565b600160a060020a038316600090815260208390526040902054806117e3576117e3611dc3565b8154811461188357815460009083906117fe90600190611c39565b8154811061180e5761180e611c50565b6000918252602080832090910154600160a060020a031680835290869052604090912083905590508083611843600185611c39565b8154811061185357611853611c50565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a03160217905550505b8180548061189357611893611daa565b6000828152602080822083016000199081018054600160a060020a0319169055909201909255600160a060020a039590951681529290935250604081205550565b600160a060020a0383166000908152600660205260409020541561193d5760405160e560020a62461bcd02815260206004820152601760248201527f52656c6174696f6e20616c7265616479206578697374730000000000000000006044820152606401610297565b6005604051806060016040528085600160a060020a0316815260200184600381111561196b5761196b611a8e565b8152600160a060020a0380851660209283015283546001810185556000948552938290208351600290950201805494909116600160a060020a0319851681178255918301519293909291839174ffffffffffffffffffffffffffffffffffffffffff19161760a060020a8360038111156119e7576119e7611a8e565b02179055506040918201516001919091018054600160a060020a031916600160a060020a0392831617905560055494166000908152600660205220929092555050565b801515811461161057600080fd5b600060208284031215611a4a57600080fd5b8135611a5581611a2a565b9392505050565b600160a060020a038116811461161057600080fd5b600060208284031215611a8357600080fd5b8135611a5581611a5c565b60e060020a634e487b7102600052602160045260246000fd5b6020810160048310611acc5760e060020a634e487b7102600052602160045260246000fd5b91905290565b6020808252825182820181905260009190848201906040850190845b81811015611b13578351600160a060020a031683529284019291840191600101611aee565b50909695505050505050565b60006020808301818452808551808352604086019150604084820287010192508387016000805b83811015611bab57888603603f1901855282518051808852835b81811015611b7b578281018a01518982018b01528901611b60565b81811115611b8b57848a838b0101525b50601f01601f191696909601870195509386019391860191600101611b46565b509398975050505050505050565b60008060408385031215611bcc57600080fd5b8235611bd781611a5c565b91506020830135611be781611a5c565b809150509250929050565b60008060408385031215611c0557600080fd5b8235611c1081611a5c565b91506020830135611be781611a2a565b60e060020a634e487b7102600052601160045260246000fd5b600082821015611c4b57611c4b611c20565b500390565b60e060020a634e487b7102600052603260045260246000fd5b600060208284031215611c7b57600080fd5b8151611a5581611a5c565b600060208284031215611c9857600080fd5b5051919050565b60208082526031908201527f4f6e6c792061205065726d697373696f6e436f6e74726163742063616e20696e60408201527f69746961746520612072656c6174696f6e000000000000000000000000000000606082015260800190565b600060208284031215611d0e57600080fd5b8151611a5581611a2a565b6020808252602e908201527f5468652073656e6465722063616e206f6e6c792062652074686520706172656e60408201527f742055736572436f6e7472616374000000000000000000000000000000000000606082015260800190565b60e060020a634e487b7102600052604160045260246000fd5b6000600019821415611da357611da3611c20565b5060010190565b60e060020a634e487b7102600052603160045260246000fd5b60e060020a634e487b7102600052600160045260246000fdfea264697066735822122037064220c27a56b601030abc7fba7bda756e1058820f081e92d343abc2857f8064736f6c634300080c0033";

    public static final String FUNC_ADDPERMISSION = "addPermission";

    public static final String FUNC_ADDPERMISSIONINTERNAL = "addPermissionInternal";

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final String FUNC_CONFIRMRELATION = "confirmRelation";

    public static final String FUNC_EDITPERMISSION = "editPermission";

    public static final String FUNC_GETALLRECORDSMETADATA = "getAllRecordsMetadata";

    public static final String FUNC_GETALLRELATIONS = "getAllRelations";

    public static final String FUNC_GETASSOCIATEDUSERS = "getAssociatedUsers";

    public static final String FUNC_GETINITIALEDRELATIONS = "getInitialedRelations";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETRECORDMETADATA = "getRecordMetadata";

    public static final String FUNC_GETRECORDSMETADATABYUSER = "getRecordsMetadataByUser";

    public static final String FUNC_GETRELATIONREQUESTS = "getRelationRequests";

    public static final String FUNC_HASACTIVERELATION = "hasActiveRelation";

    public static final String FUNC_INITRELATION = "initRelation";

    public static final String FUNC_REGISTRYCONTRACT = "registryContract";

    public static final String FUNC_REJECTRELATION = "rejectRelation";

    public static final String FUNC_RELATIONSCONTRACT = "relationsContract";

    public static final String FUNC_REMOVEPERMISSION = "removePermission";

    public static final String FUNC_REMOVEPERMISSIONINTERNAL = "removePermissionInternal";

    @Deprecated
    protected DoctorContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DoctorContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DoctorContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DoctorContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addPermission(String permissionsId, String user, BigInteger level, byte[] smk, byte[] encodedHash) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint8(level), 
                new org.web3j.abi.datatypes.DynamicBytes(smk), 
                new org.web3j.abi.datatypes.DynamicBytes(encodedHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPermissionInternal(String permissionsAddress) {
        final Function function = new Function(
                FUNC_ADDPERMISSIONINTERNAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRecord(String patientAddress, List<byte[]> patientData, List<byte[]> doctorData, String providerAddress, List<byte[]> providerData) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, patientAddress), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(patientData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(doctorData, org.web3j.abi.datatypes.DynamicBytes.class)), 
                new org.web3j.abi.datatypes.Address(160, providerAddress), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.DynamicBytes>(
                        org.web3j.abi.datatypes.DynamicBytes.class,
                        org.web3j.abi.Utils.typeMap(providerData, org.web3j.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirmRelation(String user, Boolean confirmStatus) {
        final Function function = new Function(
                FUNC_CONFIRMRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.Bool(confirmStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> editPermission(String permissionsId, String user, BigInteger newLevel) {
        final Function function = new Function(
                FUNC_EDITPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint8(newLevel)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllRecordsMetadata() {
        final Function function = new Function(FUNC_GETALLRECORDSMETADATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllRelations() {
        final Function function = new Function(FUNC_GETALLRELATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAssociatedUsers() {
        final Function function = new Function(FUNC_GETASSOCIATEDUSERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getInitialedRelations() {
        final Function function = new Function(FUNC_GETINITIALEDRELATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<byte[], byte[]>> getRecordMetadata(String permissionsAddress) {
        final Function function = new Function(FUNC_GETRECORDMETADATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        return new RemoteFunctionCall<Tuple2<byte[], byte[]>>(function,
                new Callable<Tuple2<byte[], byte[]>>() {
                    @Override
                    public Tuple2<byte[], byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<byte[], byte[]>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getRecordsMetadataByUser(String associatedUser) {
        final Function function = new Function(FUNC_GETRECORDSMETADATABYUSER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, associatedUser)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getRelationRequests() {
        final Function function = new Function(FUNC_GETRELATIONREQUESTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> hasActiveRelation(String user) {
        final Function function = new Function(FUNC_HASACTIVERELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initRelation(String user) {
        final Function function = new Function(
                FUNC_INITRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> registryContract() {
        final Function function = new Function(FUNC_REGISTRYCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> rejectRelation(String user) {
        final Function function = new Function(
                FUNC_REJECTRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> relationsContract() {
        final Function function = new Function(FUNC_RELATIONSCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removePermission(String permissionsId, String user) {
        final Function function = new Function(
                FUNC_REMOVEPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removePermissionInternal(String permissionsAddress) {
        final Function function = new Function(
                FUNC_REMOVEPERMISSIONINTERNAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DoctorContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DoctorContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DoctorContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DoctorContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DoctorContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DoctorContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DoctorContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DoctorContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DoctorContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DoctorContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DoctorContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DoctorContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
