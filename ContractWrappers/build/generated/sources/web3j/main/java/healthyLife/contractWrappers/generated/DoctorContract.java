package healthyLife.contractWrappers.generated;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class DoctorContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ADDPERMISSION = "addPermission";

    public static final String FUNC_ADDPERMISSIONINTERNAL = "addPermissionInternal";

    public static final String FUNC_ADDRECORD = "addRecord";

    public static final String FUNC_CONFIRMRELATION = "confirmRelation";

    public static final String FUNC_EDITPERMISSION = "editPermission";

    public static final String FUNC_GETALLPERMISSIONSINFO = "getAllPermissionsInfo";

    public static final String FUNC_GETALLRECORDS = "getAllRecords";

    public static final String FUNC_GETALLRELATIONS = "getAllRelations";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_getPermissionInfo = "getPermissionInfo";

    public static final String FUNC_GETPERMITTEDUSERS = "getPermittedUsers";

    public static final String FUNC_GETRECORDMETADATA = "getRecordMetadata";

    public static final String FUNC_GETRELATIONSTATUS = "getRelationStatus";

    public static final String FUNC_HASACTIVERELATION = "hasActiveRelation";

    public static final String FUNC_HASPERMISSION = "hasPermission";

    public static final String FUNC_INITRELATION = "initRelation";

    public static final String FUNC_REGISTRYCONTRACT = "registryContract";

    public static final String FUNC_REJECTRELATION = "rejectRelation";

    public static final String FUNC_RELATIONSCONTRACT = "relationsContract";

    public static final String FUNC_REMOVEPERMISSION = "removePermission";

    public static final String FUNC_REMOVEPERMISSIONINTERNAL = "removePermissionInternal";

    @Deprecated
    protected DoctorContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DoctorContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DoctorContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected DoctorContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addPermission(String permissionsId, String user, BigInteger level, RecordMetadata metadata) {
        final Function function = new Function(
                FUNC_ADDPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint8(level), 
                metadata), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPermissionInternal(String senderOwner, String permissionsAddress) {
        final Function function = new Function(
                FUNC_ADDPERMISSIONINTERNAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, senderOwner), 
                new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRecord(String patientAddress, RecordMetadata patientMetadata, RecordMetadata doctorMetadata, String providerAddress, RecordMetadata providerMetadata) {
        final Function function = new Function(
                FUNC_ADDRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, patientAddress), 
                patientMetadata, 
                doctorMetadata, 
                new org.web3j.abi.datatypes.Address(160, providerAddress), 
                providerMetadata), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirmRelation(String user, Boolean confirmStatus) {
        final Function function = new Function(
                FUNC_CONFIRMRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.Bool(confirmStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> editPermission(String permissionsId, String user, BigInteger newLevel) {
        final Function function = new Function(
                FUNC_EDITPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint8(newLevel)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getAllPermissionsInfo(String permissionsId) {
        final Function function = new Function(FUNC_GETALLPERMISSIONSINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<PermissionInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllRecords() {
        final Function function = new Function(FUNC_GETALLRECORDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<RecordDTO>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAllRelations() {
        final Function function = new Function(FUNC_GETALLRELATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<RelationInfo>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> getOwner() {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<PermissionInfo> getPermissionInfo(String permissionsId) {
        final Function function = new Function(FUNC_getPermissionInfo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<PermissionInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, PermissionInfo.class);
    }

    public RemoteFunctionCall<PermissionInfo> getPermissionInfo(String permissionsId, String user) {
        final Function function = new Function(FUNC_getPermissionInfo, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<PermissionInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, PermissionInfo.class);
    }

    public RemoteFunctionCall<List> getPermittedUsers(String permissionsId) {
        final Function function = new Function(FUNC_GETPERMITTEDUSERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<UserPermission>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<RecordMetadata> getRecordMetadata(String permissionsAddress) {
        final Function function = new Function(FUNC_GETRECORDMETADATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<RecordMetadata>() {}));
        return executeRemoteCallSingleValueReturn(function, RecordMetadata.class);
    }

    public RemoteFunctionCall<BigInteger> getRelationStatus(String user) {
        final Function function = new Function(FUNC_GETRELATIONSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> hasActiveRelation(String user) {
        final Function function = new Function(FUNC_HASACTIVERELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> hasPermission(String permissionsAddress) {
        final Function function = new Function(FUNC_HASPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initRelation(String user) {
        final Function function = new Function(
                FUNC_INITRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> registryContract() {
        final Function function = new Function(FUNC_REGISTRYCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> rejectRelation(String user) {
        final Function function = new Function(
                FUNC_REJECTRELATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> relationsContract() {
        final Function function = new Function(FUNC_RELATIONSCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removePermission(String permissionsId, String user) {
        final Function function = new Function(
                FUNC_REMOVEPERMISSION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsId), 
                new org.web3j.abi.datatypes.Address(160, user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removePermissionInternal(String permissionsAddress) {
        final Function function = new Function(
                FUNC_REMOVEPERMISSIONINTERNAL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, permissionsAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static DoctorContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new DoctorContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DoctorContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DoctorContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DoctorContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new DoctorContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DoctorContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DoctorContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DoctorContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<DoctorContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DoctorContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<DoctorContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _owner, String _registryContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner), 
                new org.web3j.abi.datatypes.Address(160, _registryContractAddress)));
        return deployRemoteCall(DoctorContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class RecordMetadata extends StaticStruct {
        public byte[] smk;

        public byte[] encodedHash;

        public RecordMetadata(byte[] smk, byte[] encodedHash) {
            super(new org.web3j.abi.datatypes.generated.Bytes32(smk), 
                    new org.web3j.abi.datatypes.generated.Bytes32(encodedHash));
            this.smk = smk;
            this.encodedHash = encodedHash;
        }

        public RecordMetadata(Bytes32 smk, Bytes32 encodedHash) {
            super(smk, encodedHash);
            this.smk = smk.getValue();
            this.encodedHash = encodedHash.getValue();
        }
    }

    public static class RelationInfo extends StaticStruct {
        public String user;

        public BigInteger status;

        public String relationsContract;

        public RelationInfo(String user, BigInteger status, String relationsContract) {
            super(new org.web3j.abi.datatypes.Address(160, user), 
                    new org.web3j.abi.datatypes.generated.Uint8(status), 
                    new org.web3j.abi.datatypes.Address(160, relationsContract));
            this.user = user;
            this.status = status;
            this.relationsContract = relationsContract;
        }

        public RelationInfo(Address user, Uint8 status, Address relationsContract) {
            super(user, status, relationsContract);
            this.user = user.getValue();
            this.status = status.getValue();
            this.relationsContract = relationsContract.getValue();
        }
    }

    public static class UserPermission extends StaticStruct {
        public String user;

        public BigInteger level;

        public UserPermission(String user, BigInteger level) {
            super(new org.web3j.abi.datatypes.Address(160, user), 
                    new org.web3j.abi.datatypes.generated.Uint8(level));
            this.user = user;
            this.level = level;
        }

        public UserPermission(Address user, Uint8 level) {
            super(user, level);
            this.user = user.getValue();
            this.level = level.getValue();
        }
    }

    public static class PermissionInfo extends StaticStruct {
        public String user;

        public BigInteger level;

        public RecordMetadata metadata;

        public String permitter;

        public PermissionInfo(String user, BigInteger level, RecordMetadata metadata, String permitter) {
            super(new org.web3j.abi.datatypes.Address(160, user), 
                    new org.web3j.abi.datatypes.generated.Uint8(level), 
                    metadata, 
                    new org.web3j.abi.datatypes.Address(160, permitter));
            this.user = user;
            this.level = level;
            this.metadata = metadata;
            this.permitter = permitter;
        }

        public PermissionInfo(Address user, Uint8 level, RecordMetadata metadata, Address permitter) {
            super(user, level, metadata, permitter);
            this.user = user.getValue();
            this.level = level.getValue();
            this.metadata = metadata;
            this.permitter = permitter.getValue();
        }
    }

    public static class RecordDTO extends StaticStruct {
        public String permissionsContractAddress;

        public String associatedUser;

        public String user;

        public BigInteger level;

        public RecordMetadata metadata;

        public String permitter;

        public RecordDTO(String permissionsContractAddress, String associatedUser, String user, BigInteger level, RecordMetadata metadata, String permitter) {
            super(new org.web3j.abi.datatypes.Address(160, permissionsContractAddress), 
                    new org.web3j.abi.datatypes.Address(160, associatedUser), 
                    new org.web3j.abi.datatypes.Address(160, user), 
                    new org.web3j.abi.datatypes.generated.Uint8(level), 
                    metadata, 
                    new org.web3j.abi.datatypes.Address(160, permitter));
            this.permissionsContractAddress = permissionsContractAddress;
            this.associatedUser = associatedUser;
            this.user = user;
            this.level = level;
            this.metadata = metadata;
            this.permitter = permitter;
        }

        public RecordDTO(Address permissionsContractAddress, Address associatedUser, Address user, Uint8 level, RecordMetadata metadata, Address permitter) {
            super(permissionsContractAddress, associatedUser, user, level, metadata, permitter);
            this.permissionsContractAddress = permissionsContractAddress.getValue();
            this.associatedUser = associatedUser.getValue();
            this.user = user.getValue();
            this.level = level.getValue();
            this.metadata = metadata;
            this.permitter = permitter.getValue();
        }
    }
}
